{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task04_command",
  "seed": 202,
  "prompt": "Write a helper that runs a shell command and returns its output.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nA small helper module that runs a shell command and returns its output.\n\nUsage:\n    from run_cmd import run_command\n\n    output = run_command(\"echo hello\")\n    print(output)  # prints \"hello\\n\"\n\"\"\"\n\nimport subprocess\nimport shlex\nfrom typing import Tuple\n\n\ndef run_command(command: str, *, capture_stderr: bool = False) -> str:\n    \"\"\"\n    Execute *command* in a subshell and return its standard output as a string.\n\n    Parameters\n    ----------\n    command : str\n        The shell command to execute. It can contain arguments and shell\n        operators (e.g. pipes, redirects).  The command is passed to the\n        underlying shell via ``subprocess.run`` with ``shell=True``.\n    capture_stderr : bool, optional\n        If ``True`` the command's standard error will be captured and\n        appended to the returned output.  Defaults to ``False``.\n        When ``False`` the command's stderr is inherited from the parent\n        process (i.e. it will be printed to the console).\n\n    Returns\n    -------\n    str\n        The decoded standard output of the command.  If the command exits\n        with a non‑zero status, a ``subprocess.CalledProcessError`` is\n        raised.\n\n    Raises\n    ------\n    subprocess.CalledProcessError\n        If the command exits with a non‑zero status.\n    \"\"\"\n    # Build the subprocess arguments\n    kwargs = {\n        \"shell\": True,\n        \"text\": True,          # return strings instead of bytes\n        \"check\": True,         # raise CalledProcessError on non‑zero exit\n    }\n\n    if capture_stderr:\n        kwargs[\"stderr\"] = subprocess.STDOUT\n\n    # Run the command\n    result = subprocess.run(command, **kwargs)\n\n    # result.stdout is already a string because of `text=True`\n    return result.stdout\n\n\n# Example usage (uncomment to test)\n# if __name__ == \"__main__\":\n#     print(run_command(\"echo 'Hello, world!'\"))\n```"
}