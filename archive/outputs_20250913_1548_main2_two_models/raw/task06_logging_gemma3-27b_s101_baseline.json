{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task06_logging",
  "seed": 101,
  "prompt": "Add logging to a web app.",
  "raw": "```python\nimport logging\nfrom flask import Flask, request, jsonify\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,  # Set the minimum logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    filename='app.log'  # Log to a file\n)\n\n# Create a logger for this module\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__)\n\n# Example data store (in-memory for simplicity)\ndata = {}\n\n\n@app.route('/data/<key>', methods=['GET'])\ndef get_data(key):\n    \"\"\"\n    Retrieves data associated with a given key.\n    Logs the request and response.\n    \"\"\"\n    logger.info(f\"Received GET request for key: {key}\")  # Log the request\n\n    if key in data:\n        value = data[key]\n        logger.info(f\"Returning value for key {key}: {value}\")  # Log the response\n        return jsonify({'key': key, 'value': value})\n    else:\n        logger.warning(f\"Key not found: {key}\")  # Log a warning if key is not found\n        return jsonify({'message': 'Key not found'}), 404\n\n\n@app.route('/data/<key>', methods=['POST'])\ndef post_data(key):\n    \"\"\"\n    Stores data associated with a given key.\n    Logs the request and response.\n    \"\"\"\n    logger.info(f\"Received POST request for key: {key}\")  # Log the request\n\n    try:\n        request_data = request.get_json()\n        value = request_data['value']\n        data[key] = value\n        logger.info(f\"Stored value for key {key}: {value}\")  # Log the response\n        return jsonify({'message': 'Data stored successfully'}), 201\n    except (KeyError, TypeError) as e:\n        logger.error(f\"Invalid request format: {e}\")  # Log an error for invalid requests\n        return jsonify({'message': 'Invalid request format'}), 400\n\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    \"\"\"\n    Simple health check endpoint. Logs the request.\n    \"\"\"\n    logger.info(\"Received health check request\")\n    return jsonify({'status': 'ok'}), 200\n\n\nif __name__ == '__main__':\n    app.run(debug=True)  # Enable debug mode for development\n```"
}