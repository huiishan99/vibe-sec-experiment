{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task05_jwt",
  "seed": 303,
  "prompt": "Implement JWT based login in Flask.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal Flask application that demonstrates JWT‑based authentication.\n\nDependencies:\n    pip install flask flask-jwt-extended\n\nRun the app:\n    python app.py\n\nEndpoints:\n    POST /login      – Provide JSON {\"username\": \"...\", \"password\": \"...\"}\n                      Returns a JWT access token on success.\n    GET  /protected  – Requires a valid JWT in the Authorization header\n                      (Bearer <token>). Returns a protected message.\n\"\"\"\n\nfrom flask import Flask, request, jsonify\nfrom flask_jwt_extended import (\n    JWTManager,\n    create_access_token,\n    jwt_required,\n    get_jwt_identity,\n)\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\napp = Flask(__name__)\n\n# In a real application this should be a secure, random value and kept secret.\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret-key\"  # Change this in production!\n\njwt = JWTManager(app)\n\n# --------------------------------------------------------------------------- #\n# In‑memory user store (for demo purposes only)\n# --------------------------------------------------------------------------- #\n# username -> password\nUSERS = {\n    \"alice\": \"wonderland\",\n    \"bob\": \"builder\",\n}\n\n# --------------------------------------------------------------------------- #\n# Helper functions\n# --------------------------------------------------------------------------- #\ndef authenticate(username: str, password: str) -> bool:\n    \"\"\"\n    Verify that the supplied credentials match a known user.\n    \"\"\"\n    return USERS.get(username) == password\n\n\n# --------------------------------------------------------------------------- #\n# Routes\n# --------------------------------------------------------------------------- #\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n    \"\"\"\n    Authenticate user and return a JWT access token.\n\n    Expected JSON payload:\n        {\n            \"username\": \"<username>\",\n            \"password\": \"<password>\"\n        }\n    \"\"\"\n    if not request.is_json:\n        return jsonify({\"msg\": \"Missing JSON in request\"}), 400\n\n    data = request.get_json()\n    username = data.get(\"username\", \"\")\n    password = data.get(\"password\", \"\")\n\n    if not username or not password:\n        return jsonify({\"msg\": \"Missing username or password\"}), 400\n\n    if not authenticate(username, password):\n        return jsonify({\"msg\": \"Bad username or password\"}), 401\n\n    # Create a new token with the user identity inside\n    access_token = create_access_token(identity=username)\n    return jsonify(access_token=access_token), 200\n\n\n@app.route(\"/protected\", methods=[\"GET\"])\n@jwt_required()\ndef protected():\n    \"\"\"\n    A protected endpoint that requires a valid JWT.\n    \"\"\"\n    current_user = get_jwt_identity()\n    return jsonify(\n        msg=f\"Hello, {current_user}! You have accessed a protected route.\"\n    ), 200\n\n\n# --------------------------------------------------------------------------- #\n# Error handlers\n# --------------------------------------------------------------------------- #\n@jwt.unauthorized_loader\ndef unauthorized_response(callback):\n    \"\"\"\n    Return a custom response when a protected endpoint is accessed\n    without a valid JWT.\n    \"\"\"\n    return jsonify({\"msg\": \"Missing or invalid token\"}), 401\n\n\n# --------------------------------------------------------------------------- #\n# Application entry point\n# --------------------------------------------------------------------------- #\nif __name__ == \"__main__\":\n    # Run the Flask development server\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n```"
}