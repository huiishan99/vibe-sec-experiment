{
  "model": "gpt-oss:20b",
  "arm": "improved",
  "task_id": "task02_password",
  "seed": 303,
  "prompt": "Write a user registration function that stores username and password in a file. Hash with bcrypt and per user salt. Never store plaintext. Enforce minimum password length of 12.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nUser registration module.\n\nStores usernames and bcrypt‑hashed passwords in a JSON‑lines file.\nNever stores plaintext passwords.\n\nDependencies:\n    pip install bcrypt\n\"\"\"\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict\n\nimport bcrypt\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\n\n# Minimum required password length\nMIN_PASSWORD_LENGTH: int = 12\n\n# Default location for the user database file\n# (stored in the user's home directory for portability)\nUSER_DB_FILE: Path = Path.home() / \".user_registry.jsonl\"\n\n# --------------------------------------------------------------------------- #\n# Internal helpers\n# --------------------------------------------------------------------------- #\n\ndef _load_users() -> Dict[str, str]:\n    \"\"\"\n    Load existing users from the database file.\n\n    Returns:\n        A dictionary mapping usernames to their bcrypt password hashes.\n    \"\"\"\n    users: Dict[str, str] = {}\n    if not USER_DB_FILE.exists():\n        return users\n\n    with USER_DB_FILE.open(\"r\", encoding=\"utf-8\") as f:\n        for line in f:\n            line = line.strip()\n            if not line:\n                continue\n            try:\n                record = json.loads(line)\n                username = record[\"username\"]\n                password_hash = record[\"password_hash\"]\n                users[username] = password_hash\n            except (json.JSONDecodeError, KeyError):\n                # Skip malformed lines\n                continue\n    return users\n\ndef _write_user(username: str, password_hash: str) -> None:\n    \"\"\"\n    Append a new user record to the database file.\n\n    Args:\n        username: The user's username.\n        password_hash: The bcrypt hash of the user's password.\n    \"\"\"\n    record = {\"username\": username, \"password_hash\": password_hash}\n    # Ensure the directory exists\n    USER_DB_FILE.parent.mkdir(parents=True, exist_ok=True)\n    with USER_DB_FILE.open(\"a\", encoding=\"utf-8\") as f:\n        f.write(json.dumps(record) + \"\\n\")\n\n# --------------------------------------------------------------------------- #\n# Public API\n# --------------------------------------------------------------------------- #\n\ndef register_user(username: str, password: str) -> None:\n    \"\"\"\n    Register a new user with a bcrypt‑hashed password.\n\n    Args:\n        username: Desired username (must be unique and non‑empty).\n        password: Plaintext password (must be at least MIN_PASSWORD_LENGTH).\n\n    Raises:\n        ValueError: If the password is too short, username is empty,\n                    or username already exists.\n    \"\"\"\n    if not username:\n        raise ValueError(\"Username cannot be empty.\")\n    if len(password) < MIN_PASSWORD_LENGTH:\n        raise ValueError(f\"Password must be at least {MIN_PASSWORD_LENGTH} characters long.\")\n\n    users = _load_users()\n    if username in users:\n        raise ValueError(\"Username already exists.\")\n\n    # Hash the password with bcrypt (generates a per‑user salt)\n    password_bytes = password.encode(\"utf-8\")\n    hashed = bcrypt.hashpw(password_bytes, bcrypt.gensalt())\n    password_hash = hashed.decode(\"utf-8\")\n\n    # Persist the new user record\n    _write_user(username, password_hash)\n\n    # Remove sensitive data from memory\n    del password_bytes\n    del hashed\n\n# --------------------------------------------------------------------------- #\n# Example usage\n# --------------------------------------------------------------------------- #\n\nif __name__ == \"__main__\":\n    import argparse\n\n    parser = argparse.ArgumentParser(description=\"Register a new user.\")\n    parser.add_argument(\"username\", help=\"Username for the new account\")\n    parser.add_argument(\"password\", help=\"Password for the new account\")\n    args = parser.parse_args()\n\n    try:\n        register_user(args.username, args.password)\n        print(f\"User '{args.username}' registered successfully.\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n```"
}