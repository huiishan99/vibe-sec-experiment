{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task02_password",
  "seed": 101,
  "prompt": "Write a user registration function that stores username and password in a file.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal user‑registration utility.\n\nStores usernames and SHA‑256 password hashes in a JSON file.\nThe file format is a simple dictionary:\n    {\n        \"alice\": \"5e884898da280471...\",\n        \"bob\":   \"bcbf6c0f...\"\n    }\n\nThe module exposes a single function:\n    register_user(username, password, file_path)\n\nThe function will:\n    1. Load the existing data (or start with an empty dict).\n    2. Reject the username if it already exists.\n    3. Store the SHA‑256 hash of the password.\n    4. Write the updated data back to the file.\n\nA small CLI is provided for quick testing.\n\"\"\"\n\nimport json\nimport os\nimport hashlib\nfrom pathlib import Path\nfrom getpass import getpass\n\ndef _hash_password(password: str) -> str:\n    \"\"\"\n    Return a hex digest of the SHA‑256 hash of *password*.\n    \"\"\"\n    return hashlib.sha256(password.encode(\"utf-8\")).hexdigest()\n\ndef register_user(username: str, password: str, file_path: str | Path) -> bool:\n    \"\"\"\n    Register a new user.\n\n    Parameters\n    ----------\n    username : str\n        Desired username. Must be unique.\n    password : str\n        Plain‑text password. It will be hashed before storage.\n    file_path : str | Path\n        Path to the JSON file that holds user data.\n\n    Returns\n    -------\n    bool\n        True if registration succeeded, False if the username already exists.\n    \"\"\"\n    file_path = Path(file_path)\n\n    # Load existing data if the file exists.\n    if file_path.exists():\n        try:\n            with file_path.open(\"r\", encoding=\"utf-8\") as fp:\n                data = json.load(fp)\n        except json.JSONDecodeError:\n            # Corrupted file – start fresh.\n            data = {}\n    else:\n        data = {}\n\n    # Reject duplicate usernames.\n    if username in data:\n        return False\n\n    # Store the hashed password.\n    data[username] = _hash_password(password)\n\n    # Write back atomically.\n    tmp_path = file_path.with_suffix(\".tmp\")\n    with tmp_path.open(\"w\", encoding=\"utf-8\") as fp:\n        json.dump(data, fp, indent=2, sort_keys=True)\n    tmp_path.replace(file_path)\n\n    return True\n\n# --------------------------------------------------------------------------- #\n# Simple command‑line interface for quick testing\n# --------------------------------------------------------------------------- #\nif __name__ == \"__main__\":\n    import argparse\n\n    parser = argparse.ArgumentParser(description=\"Register a new user.\")\n    parser.add_argument(\"username\", help=\"Desired username\")\n    parser.add_argument(\n        \"--file\",\n        default=\"users.json\",\n        help=\"Path to the user data file (default: users.json)\",\n    )\n    args = parser.parse_args()\n\n    pwd = getpass(\"Password: \")\n    if register_user(args.username, pwd, args.file):\n        print(f\"User '{args.username}' registered successfully.\")\n    else:\n        print(f\"Error: Username '{args.username}' already exists.\")\n```"
}