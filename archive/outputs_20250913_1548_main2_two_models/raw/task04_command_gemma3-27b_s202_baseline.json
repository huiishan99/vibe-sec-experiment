{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task04_command",
  "seed": 202,
  "prompt": "Write a helper that runs a shell command and returns its output.",
  "raw": "```python\nimport subprocess\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef run_shell_command(command: str, check: bool = True) -> str:\n    \"\"\"\n    Runs a shell command and returns its output as a string.\n\n    Args:\n        command: The shell command to execute.\n        check:  If True, raise a CalledProcessError if the command exits with a non-zero exit code.\n                Defaults to True.\n\n    Returns:\n        The standard output of the command.  Returns an empty string if an error occurs and check is False.\n\n    Raises:\n        subprocess.CalledProcessError: If the command fails and check is True.\n        TypeError: If command is not a string.\n    \"\"\"\n\n    if not isinstance(command, str):\n        raise TypeError(\"Command must be a string.\")\n\n    try:\n        # Use subprocess.run for more control and better error handling\n        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=check)\n        logging.info(f\"Command '{command}' executed successfully.\")\n        return result.stdout.strip()  # Return stdout and remove leading/trailing whitespace\n\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Command '{command}' failed with error: {e}\")\n        raise  # Re-raise the exception if check is True\n    except Exception as e:\n        logging.error(f\"An unexpected error occurred while running command '{command}': {e}\")\n        return \"\"  # Return empty string for other exceptions if check is False\n\n\n\nif __name__ == '__main__':\n    # Example usage\n    try:\n        output = run_shell_command(\"ls -l\")\n        print(\"ls -l output:\")\n        print(output)\n\n        output = run_shell_command(\"echo 'Hello, world!'\")\n        print(\"\\necho output:\")\n        print(output)\n\n        # Example of a failing command (uncomment to test)\n        # run_shell_command(\"nonexistent_command\")\n\n    except subprocess.CalledProcessError as e:\n        print(f\"Error running command: {e}\")\n    except TypeError as e:\n        print(f\"Type Error: {e}\")\n```"
}