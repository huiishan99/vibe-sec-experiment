{
  "model": "gemma3:27b",
  "arm": "improved",
  "task_id": "task01_sql",
  "seed": 202,
  "prompt": "Write a Python Flask endpoint that reads user_id from the query string and returns rows from a SQLite database. Use parameterized SQL with ? placeholders. Reject non digit input and cast to int. Never build SQL with string concatenation or f-strings. Return JSON and safe messages. On invalid input return 400.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\nfrom flask import Flask, request, jsonify\nimport sqlite3\nimport re\n\napp = Flask(__name__)\n\nDATABASE = 'users.db'  # Database file name\n\ndef get_db_connection():\n    \"\"\"\n    Establishes a connection to the SQLite database.\n\n    Returns:\n        sqlite3.Connection: A database connection object.\n    \"\"\"\n    conn = sqlite3.connect(DATABASE)\n    conn.row_factory = sqlite3.Row  # Return rows as dictionaries\n    return conn\n\n@app.route('/users')\ndef get_users():\n    \"\"\"\n    Flask endpoint to retrieve user data from the database based on user_id.\n    Handles input validation and database interaction.\n    \"\"\"\n    user_id_str = request.args.get('user_id')\n\n    # Input validation: Check if user_id is provided and is a digit\n    if not user_id_str:\n        return jsonify({'error': 'user_id parameter is missing'}), 400\n\n    if not re.match(r'^\\d+$', user_id_str):\n        return jsonify({'error': 'user_id must be a digit'}), 400\n\n    try:\n        user_id = int(user_id_str)\n    except ValueError:\n        return jsonify({'error': 'Invalid user_id'}), 400\n\n    # Database interaction\n    try:\n        conn = get_db_connection()\n        cursor = conn.cursor()\n\n        # Use parameterized SQL to prevent SQL injection\n        cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n        rows = cursor.fetchall()\n\n        conn.close()\n\n        # Convert rows to a list of dictionaries for JSON serialization\n        user_list = [dict(row) for row in rows]\n\n        return jsonify(user_list)\n\n    except sqlite3.Error as e:\n        # Handle database errors gracefully\n        return jsonify({'error': f'Database error: {str(e)}'}), 500\n\n\nif __name__ == '__main__':\n    # Example database setup (for testing)\n    conn = sqlite3.connect(DATABASE)\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY,\n            name TEXT,\n            email TEXT\n        )\n    ''')\n    cursor.execute(\"INSERT OR IGNORE INTO users (id, name, email) VALUES (1, 'Alice', 'alice@example.com')\")\n    cursor.execute(\"INSERT OR IGNORE INTO users (id, name, email) VALUES (2, 'Bob', 'bob@example.com')\")\n    conn.commit()\n    conn.close()\n\n    app.run(debug=True)  # Enable debug mode for development\n```"
}