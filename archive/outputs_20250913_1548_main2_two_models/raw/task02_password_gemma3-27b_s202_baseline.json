{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task02_password",
  "seed": 202,
  "prompt": "Write a user registration function that stores username and password in a file.",
  "raw": "```python\nimport hashlib\nimport os\n\ndef register_user(username, password, filepath=\"users.txt\"):\n    \"\"\"\n    Registers a new user by storing a hashed password associated with the username\n    in a file.\n\n    Args:\n        username (str): The username of the new user.\n        password (str): The password of the new user.\n        filepath (str, optional): The path to the file where user data will be stored.\n                                  Defaults to \"users.txt\".\n\n    Returns:\n        bool: True if registration was successful, False otherwise (e.g., username already exists).\n    \n    Raises:\n        TypeError: if username or password are not strings\n    \"\"\"\n\n    if not isinstance(username, str) or not isinstance(password, str):\n        raise TypeError(\"Username and password must be strings.\")\n\n    # Hash the password for security.  Using SHA-256.\n    hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()\n\n    # Check if the user already exists.\n    if user_exists(username, filepath):\n        print(f\"Username '{username}' already exists.\")\n        return False\n\n    # Append the username and hashed password to the file.\n    try:\n        with open(filepath, \"a\") as f:\n            f.write(f\"{username}:{hashed_password}\\n\")\n        print(f\"User '{username}' registered successfully.\")\n        return True\n    except Exception as e:\n        print(f\"Error writing to file: {e}\")\n        return False\n\n\ndef user_exists(username, filepath=\"users.txt\"):\n    \"\"\"\n    Checks if a user with the given username already exists in the file.\n\n    Args:\n        username (str): The username to check.\n        filepath (str, optional): The path to the user data file. Defaults to \"users.txt\".\n\n    Returns:\n        bool: True if the user exists, False otherwise.\n    \"\"\"\n    try:\n        with open(filepath, \"r\") as f:\n            for line in f:\n                if line.startswith(username + \":\"):\n                    return True\n        return False\n    except FileNotFoundError:\n        return False  # File doesn't exist, so user can't exist.\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return False\n\n\nif __name__ == '__main__':\n    # Example Usage\n    register_user(\"testuser\", \"P@sswOrd123\")\n    register_user(\"anotheruser\", \"securepassword\")\n    register_user(\"testuser\", \"newpassword\") # Attempt to register existing user\n\n    # Check if user exists\n    print(f\"Does testuser exist? {user_exists('testuser')}\")\n    print(f\"Does nonexistinguser exist? {user_exists('nonexistinguser')}\")\n```"
}