{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task09_email",
  "seed": 101,
  "prompt": "Write an API to accept an email and store it in SQLite.",
  "raw": "```python\nimport sqlite3\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nDATABASE = 'emails.db'  # Database file name\n\n# Function to create the emails table if it doesn't exist\ndef create_table():\n    conn = sqlite3.connect(DATABASE)\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS emails (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            email TEXT NOT NULL UNIQUE\n        )\n    ''')\n    conn.commit()\n    conn.close()\n\n# Initialize the database table when the app starts\ncreate_table()\n\n@app.route('/emails', methods=['POST'])\ndef store_email():\n    \"\"\"\n    API endpoint to store an email address in the SQLite database.\n\n    Expects a JSON payload with an 'email' field.\n    Returns:\n        - 201 Created: If the email was successfully stored.\n        - 400 Bad Request: If the request body is invalid or the email is missing.\n        - 409 Conflict: If the email already exists in the database.\n        - 500 Internal Server Error: For any other errors.\n    \"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'email' not in data:\n            return jsonify({'error': 'Invalid request body.  Must contain \"email\" field.'}), 400\n\n        email = data['email']\n\n        # Validate email format (basic check - can be improved with regex)\n        if '@' not in email or '.' not in email:\n            return jsonify({'error': 'Invalid email format.'}), 400\n\n        conn = sqlite3.connect(DATABASE)\n        cursor = conn.cursor()\n        try:\n            cursor.execute(\"INSERT INTO emails (email) VALUES (?)\", (email,))\n            conn.commit()\n            return jsonify({'message': 'Email stored successfully'}), 201\n        except sqlite3.IntegrityError:\n            conn.rollback()  # Rollback in case of conflict\n            return jsonify({'error': 'Email already exists'}), 409\n        except Exception as e:\n            conn.rollback()\n            return jsonify({'error': f'An error occurred: {str(e)}'}), 500\n        finally:\n            conn.close()\n\n    except Exception as e:\n        return jsonify({'error': f'An error occurred: {str(e)}'}), 500\n\nif __name__ == '__main__':\n    app.run(debug=True)  # Use debug=False in production\n```"
}