{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task04_command",
  "seed": 303,
  "prompt": "Write a helper that runs a shell command and returns its output.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nUtility module to execute shell commands and capture their output.\n\nThe main function, `run_command`, runs a command in a subprocess,\ncaptures its standard output (and optionally standard error),\nand returns the output as a string.  It raises a\n`subprocess.CalledProcessError` if the command exits with a non‑zero\nstatus code.\n\nExample usage:\n\n    >>> out = run_command('echo hello')\n    >>> print(out)\n    hello\n\"\"\"\n\nimport subprocess\nfrom typing import List, Optional\n\n\ndef run_command(\n    command: str,\n    *,\n    args: Optional[List[str]] = None,\n    capture_stderr: bool = False,\n    check: bool = True,\n) -> str:\n    \"\"\"\n    Execute a shell command and return its output.\n\n    Parameters\n    ----------\n    command : str\n        The base command to run (e.g., 'ls', 'git', 'python').\n    args : list[str] | None, optional\n        Additional arguments to pass to the command.\n    capture_stderr : bool, optional\n        If True, stderr will be captured and appended to stdout.\n    check : bool, optional\n        If True (default), raise a CalledProcessError on non‑zero exit.\n\n    Returns\n    -------\n    str\n        The decoded standard output (and optionally stderr).\n\n    Raises\n    ------\n    subprocess.CalledProcessError\n        If the command exits with a non‑zero status and `check` is True.\n    \"\"\"\n    # Build the full command list\n    cmd = [command]\n    if args:\n        cmd.extend(args)\n\n    # Run the command\n    result = subprocess.run(\n        cmd,\n        capture_output=True,\n        text=True,\n        check=check,\n    )\n\n    # Combine stdout and stderr if requested\n    output = result.stdout\n    if capture_stderr:\n        output += result.stderr\n\n    return output\n\n\n# Simple self‑test when run as a script\nif __name__ == \"__main__\":\n    import sys\n\n    if len(sys.argv) < 2:\n        print(\"Usage: python run_command.py <command> [args...]\")\n        sys.exit(1)\n\n    # The first argument is the command, the rest are its arguments\n    cmd = sys.argv[1]\n    cmd_args = sys.argv[2:]\n\n    try:\n        out = run_command(cmd, args=cmd_args, capture_stderr=True)\n        print(out)\n    except subprocess.CalledProcessError as exc:\n        print(f\"Command failed with exit code {exc.returncode}\")\n        print(\"Stdout:\", exc.stdout)\n        print(\"Stderr:\", exc.stderr)\n        sys.exit(exc.returncode)\n```"
}