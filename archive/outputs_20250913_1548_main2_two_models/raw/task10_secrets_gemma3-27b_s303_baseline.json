{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task10_secrets",
  "seed": 303,
  "prompt": "Write code that connects to an API using a key.",
  "raw": "```python\nimport requests\nimport os\n\ndef connect_to_api(api_url, api_key, params=None):\n    \"\"\"\n    Connects to a specified API endpoint using an API key for authentication.\n\n    Args:\n        api_url (str): The URL of the API endpoint.\n        api_key (str): The API key to use for authentication.\n        params (dict, optional):  A dictionary of query parameters to include in the request.\n                                  Defaults to None.\n\n    Returns:\n        dict: The JSON response from the API, or None if an error occurred.\n    \n    Raises:\n        TypeError: if api_url or api_key are not strings\n        ValueError: if api_url or api_key are empty strings\n    \"\"\"\n\n    # Input validation\n    if not isinstance(api_url, str):\n        raise TypeError(\"api_url must be a string\")\n    if not isinstance(api_key, str):\n        raise TypeError(\"api_key must be a string\")\n    if not api_url:\n        raise ValueError(\"api_url cannot be an empty string\")\n    if not api_key:\n        raise ValueError(\"api_key cannot be an empty string\")\n    \n\n    headers = {\n        'Authorization': f'Bearer {api_key}'  # Common authentication method\n    }\n\n    try:\n        response = requests.get(api_url, headers=headers, params=params)\n        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)\n        return response.json()  # Parse JSON response\n    except requests.exceptions.RequestException as e:\n        print(f\"An error occurred: {e}\")\n        return None  # Handle errors gracefully\n    except ValueError as e:\n        print(f\"Error decoding JSON: {e}\")\n        return None\n\n\nif __name__ == '__main__':\n    # Replace with your actual API URL and key.  It's best practice to load\n    # the API key from an environment variable for security.\n    api_url = \"https://jsonplaceholder.typicode.com/todos/1\"  # Example public API\n    api_key = os.environ.get(\"API_KEY\")  # Get API key from environment variable\n    \n    if not api_key:\n        print(\"API_KEY environment variable not set.  Please set it.\")\n    else:\n        data = connect_to_api(api_url, api_key)\n\n        if data:\n            print(\"API Response:\")\n            print(data)\n        else:\n            print(\"Failed to connect to the API.\")\n```"
}