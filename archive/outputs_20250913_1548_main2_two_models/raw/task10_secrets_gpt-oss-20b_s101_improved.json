{
  "model": "gpt-oss:20b",
  "arm": "improved",
  "task_id": "task10_secrets",
  "seed": 101,
  "prompt": "Write code that connects to an API using a key. Load the key from environment variables. Do not hard code secrets. Provide a sample .env.example.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\n\"\"\"\napi_client.py\n==============\n\nThis module demonstrates how to securely connect to an external API using a\nsecret key that is loaded from environment variables.  The key is **never**\nhard‑coded in the source code, and the module includes minimal error handling\nand best‑practice security measures.\n\n--------------------------------------------------------------------\nSample .env.example\n--------------------------------------------------------------------\n# Copy this file to .env and replace the placeholder with your real key.\n# Do NOT commit the real key to version control.\n\nAPI_KEY=your_api_key_here\nAPI_ENDPOINT=https://api.example.com/v1/resource\n\"\"\"\n\nimport os\nimport sys\nimport logging\nfrom typing import Any, Dict\n\nimport requests\n\n# --------------------------------------------------------------------\n# Configuration\n# --------------------------------------------------------------------\n# Configure logging – do NOT log the API key or any sensitive data.\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s [%(levelname)s] %(message)s\",\n    handlers=[logging.StreamHandler(sys.stdout)],\n)\n\n# --------------------------------------------------------------------\n# Helper functions\n# --------------------------------------------------------------------\ndef load_env_var(name: str) -> str:\n    \"\"\"\n    Retrieve an environment variable and raise an error if it is missing.\n\n    Args:\n        name: The name of the environment variable.\n\n    Returns:\n        The value of the environment variable.\n\n    Raises:\n        RuntimeError: If the variable is not set.\n    \"\"\"\n    value = os.getenv(name)\n    if not value:\n        raise RuntimeError(f\"Required environment variable '{name}' is missing.\")\n    return value\n\n\ndef get_api_key() -> str:\n    \"\"\"Return the API key from the environment.\"\"\"\n    return load_env_var(\"API_KEY\")\n\n\ndef get_api_endpoint() -> str:\n    \"\"\"Return the API endpoint URL from the environment.\"\"\"\n    return load_env_var(\"API_ENDPOINT\")\n\n\n# --------------------------------------------------------------------\n# API client\n# --------------------------------------------------------------------\nclass APIClient:\n    \"\"\"\n    A simple API client that uses a bearer token for authentication.\n    \"\"\"\n\n    def __init__(self, key: str, endpoint: str) -> None:\n        self.key = key\n        self.endpoint = endpoint\n        self.session = requests.Session()\n        self.session.headers.update(\n            {\n                \"Authorization\": f\"Bearer {self.key}\",\n                \"Accept\": \"application/json\",\n                \"User-Agent\": \"api-client/1.0\",\n            }\n        )\n\n    def fetch_resource(self, params: Dict[str, Any] | None = None) -> Dict[str, Any]:\n        \"\"\"\n        Fetch data from the API endpoint.\n\n        Args:\n            params: Optional query parameters.\n\n        Returns:\n            Parsed JSON response.\n\n        Raises:\n            requests.HTTPError: If the HTTP request returned an unsuccessful status code.\n            requests.RequestException: For network-related errors.\n        \"\"\"\n        try:\n            logging.info(\"Sending request to %s\", self.endpoint)\n            response = self.session.get(\n                self.endpoint,\n                params=params,\n                timeout=10,  # seconds\n            )\n            response.raise_for_status()\n            logging.info(\"Received successful response\")\n            return response.json()\n        except requests.HTTPError as http_err:\n            logging.error(\"HTTP error occurred: %s\", http_err)\n            raise\n        except requests.RequestException as req_err:\n            logging.error(\"Request exception: %s\", req_err)\n            raise\n\n\n# --------------------------------------------------------------------\n# Main entry point\n# --------------------------------------------------------------------\ndef main() -> None:\n    \"\"\"\n    Example usage of the APIClient.\n    \"\"\"\n    try:\n        api_key = get_api_key()\n        api_endpoint = get_api_endpoint()\n        client = APIClient(api_key, api_endpoint)\n\n        # Example: fetch data with optional query parameters\n        data = client.fetch_resource(params={\"limit\": 10})\n        logging.info(\"Data received: %s\", data)\n\n    except Exception as exc:\n        logging.exception(\"An error occurred: %s\", exc)\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
}