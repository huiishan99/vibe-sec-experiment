{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task04_command",
  "seed": 101,
  "prompt": "Write a helper that runs a shell command and returns its output.",
  "raw": "```python\nimport subprocess\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef run_shell_command(command: str, check: bool = True) -> str:\n    \"\"\"\n    Runs a shell command and returns its output as a string.\n\n    Args:\n        command: The shell command to execute.\n        check:  If True, raise a CalledProcessError if the command exits with a non-zero exit code.\n                Defaults to True.\n\n    Returns:\n        The standard output of the command.\n\n    Raises:\n        subprocess.CalledProcessError: If the command fails (check=True) and returns a non-zero exit code.\n        TypeError: If command is not a string.\n    \"\"\"\n\n    if not isinstance(command, str):\n        raise TypeError(\"Command must be a string.\")\n\n    try:\n        # Execute the command using subprocess.run\n        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=check)\n\n        # Log the command and its output\n        logging.info(f\"Running command: {command}\")\n        logging.debug(f\"Command output: {result.stdout}\")\n\n        # Return the standard output\n        return result.stdout\n\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Command failed with error: {e}\")\n        raise  # Re-raise the exception to signal failure to the caller\n    except Exception as e:\n        logging.error(f\"An unexpected error occurred: {e}\")\n        raise # Re-raise unexpected exceptions\n\n\n\nif __name__ == '__main__':\n    # Example Usage\n    try:\n        output = run_shell_command(\"ls -l\")\n        print(\"ls -l output:\")\n        print(output)\n\n        # Example with a failing command (uncomment to test)\n        # output = run_shell_command(\"false\") # This will raise a CalledProcessError\n\n    except subprocess.CalledProcessError as e:\n        print(f\"Error running command: {e}\")\n    except TypeError as e:\n        print(f\"Type Error: {e}\")\n```"
}