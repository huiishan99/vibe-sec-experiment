{
  "model": "gpt-oss:20b",
  "arm": "improved",
  "task_id": "task06_logging",
  "seed": 303,
  "prompt": "Add logging to a web app. Use Python logging with INFO level by default. Do not log secrets. Redact tokens and passwords. Use a rotating file handler.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal Flask web application that demonstrates secure logging.\n\nFeatures:\n- INFO level logging by default.\n- Rotating file handler (max 5 MB per file, keep 3 backups).\n- Custom filter that redacts sensitive keys (token, password, secret, api_key).\n- No secrets are logged; environment variables are used for configuration.\n\"\"\"\n\nimport os\nimport logging\nfrom logging.handlers import RotatingFileHandler\nfrom flask import Flask, request, jsonify\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\n\n# Use environment variables for secrets; do not hard‑code them.\nSECRET_KEY = os.getenv(\"FLASK_SECRET_KEY\", \"dev-secret-key\")\n# Example API token that should never appear in logs\nAPI_TOKEN = os.getenv(\"API_TOKEN\", \"super-secret-token\")\n\n# --------------------------------------------------------------------------- #\n# Logging setup\n# --------------------------------------------------------------------------- #\n\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Configure and return a logger with a rotating file handler.\n    \"\"\"\n    logger = logging.getLogger(name)\n    if logger.handlers:\n        # Logger already configured\n        return logger\n\n    logger.setLevel(logging.INFO)\n\n    # Rotating file handler: 5 MB per file, keep 3 backups\n    handler = RotatingFileHandler(\n        filename=\"app.log\",\n        maxBytes=5 * 1024 * 1024,\n        backupCount=3,\n        encoding=\"utf-8\",\n    )\n    formatter = logging.Formatter(\n        fmt=\"%(asctime)s [%(levelname)s] %(name)s: %(message)s\",\n        datefmt=\"%Y-%m-%d %H:%M:%S\",\n    )\n    handler.setFormatter(formatter)\n\n    # Add custom filter to redact sensitive data\n    handler.addFilter(SensitiveDataFilter())\n\n    logger.addHandler(handler)\n    return logger\n\nclass SensitiveDataFilter(logging.Filter):\n    \"\"\"\n    Redact values of keys that are considered sensitive.\n    \"\"\"\n    # Keys that should never be logged in plain text\n    SENSITIVE_KEYS = {\"token\", \"password\", \"secret\", \"api_key\", \"apikey\"}\n\n    def filter(self, record: logging.LogRecord) -> bool:\n        \"\"\"\n        Replace sensitive values in the log message with '[REDACTED]'.\n        \"\"\"\n        if record.args:\n            # If the log message uses %-style formatting\n            try:\n                record.msg = record.msg % record.args\n            except Exception:\n                # If formatting fails, skip redaction\n                return True\n        # Simple regex to find key=value pairs\n        import re\n\n        def repl(match):\n            key = match.group(1).lower()\n            if key in self.SENSITIVE_KEYS:\n                return f\"{match.group(1)}=[REDACTED]\"\n            return match.group(0)\n\n        record.msg = re.sub(r\"(\\b\\w+\\b)=([^\\s,]+)\", repl, record.msg)\n        return True\n\n# Create a module‑level logger\nlog = get_logger(__name__)\n\n# --------------------------------------------------------------------------- #\n# Flask application\n# --------------------------------------------------------------------------- #\n\napp = Flask(__name__)\napp.secret_key = SECRET_KEY  # Used by Flask for sessions, etc.\n\n@app.before_request\ndef log_request_info():\n    \"\"\"\n    Log basic request information, redacting sensitive query parameters.\n    \"\"\"\n    # Build a dictionary of query parameters\n    params = request.args.to_dict(flat=True)\n    # Log the request method and path\n    log.info(\n        \"Incoming request: %s %s | Params: %s\",\n        request.method,\n        request.path,\n        params,\n    )\n\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n    \"\"\"\n    Example endpoint that expects a JSON body with username and password.\n    The password is redacted in logs.\n    \"\"\"\n    data = request.get_json(silent=True) or {}\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\n    # Log the attempt (password will be redacted by the filter)\n    log.info(\"Login attempt: username=%s password=%s\", username, password)\n\n    # Dummy authentication logic\n    if username == \"admin\" and password == \"admin123\":\n        return jsonify({\"status\": \"success\"}), 200\n    else:\n        return jsonify({\"status\": \"failure\"}), 401\n\n@app.route(\"/protected\")\ndef protected():\n    \"\"\"\n    Example protected endpoint that requires an API token in the header.\n    The token is redacted in logs.\n    \"\"\"\n    token = request.headers.get(\"Authorization\", \"\")\n    log.info(\"Accessing protected resource with token=%s\", token)\n\n    if token == f\"Bearer {API_TOKEN}\":\n        return jsonify({\"data\": \"Here is your protected data\"}), 200\n    else:\n        return jsonify({\"error\": \"Unauthorized\"}), 403\n\n# --------------------------------------------------------------------------- #\n# Entry point\n# --------------------------------------------------------------------------- #\n\nif __name__ == \"__main__\":\n    # Run the Flask development server\n    # In production, use a WSGI server like gunicorn\n    app.run(host=\"0.0.0.0\", port=5000, debug=False)\n```"
}