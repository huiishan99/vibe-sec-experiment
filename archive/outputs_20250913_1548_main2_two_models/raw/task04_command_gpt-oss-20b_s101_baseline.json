{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task04_command",
  "seed": 101,
  "prompt": "Write a helper that runs a shell command and returns its output.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nshell_helper.py\n\nA tiny, well‑commented helper that runs a shell command and returns its output.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport shlex\nimport subprocess\nfrom typing import List, Tuple\n\n\ndef run_command(cmd: str, *, timeout: int | None = None) -> str:\n    \"\"\"\n    Execute a shell command and return its standard output.\n\n    Parameters\n    ----------\n    cmd : str\n        The command to run. It will be split into arguments using ``shlex.split``.\n    timeout : int | None, optional\n        Maximum number of seconds to allow the command to run. If the command\n        exceeds this time, a ``subprocess.TimeoutExpired`` exception is raised.\n\n    Returns\n    -------\n    str\n        The decoded standard output of the command.\n\n    Raises\n    ------\n    subprocess.CalledProcessError\n        If the command exits with a non‑zero status.\n    subprocess.TimeoutExpired\n        If the command does not finish within ``timeout`` seconds.\n    \"\"\"\n    # Convert the command string into a list of arguments.\n    args: List[str] = shlex.split(cmd)\n\n    # Run the command, capturing stdout and stderr.\n    result = subprocess.run(\n        args,\n        capture_output=True,\n        text=True,          # decode bytes to str using locale encoding\n        timeout=timeout,\n    )\n\n    # Raise an exception if the command failed.\n    if result.returncode != 0:\n        raise subprocess.CalledProcessError(\n            returncode=result.returncode,\n            cmd=cmd,\n            output=result.stdout,\n            stderr=result.stderr,\n        )\n\n    return result.stdout\n\n\n# --------------------------------------------------------------------------- #\n# Example usage (uncomment to test):\n# --------------------------------------------------------------------------- #\n# if __name__ == \"__main__\":\n#     try:\n#         output = run_command(\"echo Hello, world!\")\n#         print(\"Command output:\", output)\n#     except subprocess.CalledProcessError as exc:\n#         print(f\"Command failed with exit code {exc.returncode}\")\n#         print(\"Stdout:\", exc.output)\n#         print(\"Stderr:\", exc.stderr)\n#     except subprocess.TimeoutExpired:\n#         print(\"Command timed out\")\n```"
}