{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task09_email",
  "seed": 202,
  "prompt": "Write an API to accept an email and store it in SQLite.",
  "raw": "```python\n# email_api.py\n\"\"\"\nA minimal FastAPI application that accepts an email address via a POST request\nand stores it in a SQLite database.\n\nRequirements:\n    pip install fastapi uvicorn pydantic email-validator\n\nRun the server:\n    uvicorn email_api:app --reload\n\"\"\"\n\nimport re\nimport sqlite3\nfrom pathlib import Path\nfrom typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom pydantic import BaseModel, EmailStr\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\n\nDB_PATH = Path(__file__).parent / \"emails.db\"\nTABLE_NAME = \"emails\"\n\n# --------------------------------------------------------------------------- #\n# Database helpers\n# --------------------------------------------------------------------------- #\n\ndef get_db_connection() -> sqlite3.Connection:\n    \"\"\"\n    Create a new SQLite connection. The connection is closed automatically\n    by FastAPI's dependency system after the request is finished.\n    \"\"\"\n    conn = sqlite3.connect(DB_PATH)\n    conn.row_factory = sqlite3.Row\n    return conn\n\ndef init_db() -> None:\n    \"\"\"\n    Create the emails table if it does not exist.\n    \"\"\"\n    conn = get_db_connection()\n    conn.execute(\n        f\"\"\"\n        CREATE TABLE IF NOT EXISTS {TABLE_NAME} (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            email TEXT NOT NULL UNIQUE,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        );\n        \"\"\"\n    )\n    conn.commit()\n    conn.close()\n\n# --------------------------------------------------------------------------- #\n# FastAPI app\n# --------------------------------------------------------------------------- #\n\napp = FastAPI(title=\"Email Storage API\")\n\n# Ensure the database is ready on startup\n@app.on_event(\"startup\")\ndef startup_event() -> None:\n    init_db()\n\n# --------------------------------------------------------------------------- #\n# Pydantic models\n# --------------------------------------------------------------------------- #\n\nclass EmailIn(BaseModel):\n    \"\"\"\n    Request body for storing an email.\n    \"\"\"\n    email: EmailStr  # Pydantic + email-validator will validate format\n\nclass EmailOut(BaseModel):\n    \"\"\"\n    Response body after storing an email.\n    \"\"\"\n    id: int\n    email: str\n    created_at: str\n\n# --------------------------------------------------------------------------- #\n# API endpoints\n# --------------------------------------------------------------------------- #\n\n@app.post(\"/emails\", response_model=EmailOut, status_code=201)\ndef create_email(\n    payload: EmailIn,\n    db: sqlite3.Connection = Depends(get_db_connection),\n) -> EmailOut:\n    \"\"\"\n    Store a new email address in the database.\n\n    Raises:\n        HTTPException 400: If the email already exists.\n    \"\"\"\n    try:\n        cursor = db.execute(\n            f\"INSERT INTO {TABLE_NAME} (email) VALUES (?)\",\n            (payload.email,),\n        )\n        db.commit()\n    except sqlite3.IntegrityError as exc:\n        # Likely a UNIQUE constraint violation\n        raise HTTPException(\n            status_code=400,\n            detail=f\"Email '{payload.email}' already exists.\",\n        ) from exc\n\n    # Retrieve the inserted row\n    cursor = db.execute(\n        f\"SELECT id, email, created_at FROM {TABLE_NAME} WHERE id = ?\",\n        (cursor.lastrowid,),\n    )\n    row = cursor.fetchone()\n    return EmailOut(**row)\n\n# Optional: list all stored emails (GET)\n@app.get(\"/emails\", response_model=list[EmailOut])\ndef list_emails(\n    db: sqlite3.Connection = Depends(get_db_connection),\n) -> list[EmailOut]:\n    \"\"\"\n    Retrieve all stored email addresses.\n    \"\"\"\n    cursor = db.execute(\n        f\"SELECT id, email, created_at FROM {TABLE_NAME} ORDER BY created_at DESC\"\n    )\n    rows = cursor.fetchall()\n    return [EmailOut(**row) for row in rows]\n\n# --------------------------------------------------------------------------- #\n# Run with: uvicorn email_api:app --reload\n# --------------------------------------------------------------------------- #\n```"
}