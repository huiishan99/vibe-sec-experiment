{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task03_upload",
  "seed": 202,
  "prompt": "Create a Flask route to upload a file and save it on disk.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal Flask application that exposes a single route for uploading a file\nand saving it to disk.\n\nThe route accepts a POST request with a multipart/formâ€‘data body containing\na file field named \"file\".  The uploaded file is stored in the directory\nspecified by the UPLOAD_FOLDER configuration variable.\n\nAuthor: Senior Python Engineer\n\"\"\"\n\nfrom flask import Flask, request, redirect, url_for, flash, render_template_string\nfrom werkzeug.utils import secure_filename\nimport os\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\nUPLOAD_FOLDER = \"./uploads\"          # Directory where uploaded files will be stored\nALLOWED_EXTENSIONS = {\"txt\", \"pdf\", \"png\", \"jpg\", \"jpeg\", \"gif\"}  # Optional filter\n\n# Ensure the upload folder exists\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n\n# --------------------------------------------------------------------------- #\n# Flask application setup\n# --------------------------------------------------------------------------- #\napp = Flask(__name__)\napp.config[\"UPLOAD_FOLDER\"] = UPLOAD_FOLDER\napp.secret_key = \"supersecretkey\"  # Needed for flashing messages\n\n# --------------------------------------------------------------------------- #\n# Helper functions\n# --------------------------------------------------------------------------- #\ndef allowed_file(filename: str) -> bool:\n    \"\"\"\n    Check if the file has an allowed extension.\n    \"\"\"\n    return \".\" in filename and filename.rsplit(\".\", 1)[1].lower() in ALLOWED_EXTENSIONS\n\n# --------------------------------------------------------------------------- #\n# Routes\n# --------------------------------------------------------------------------- #\n@app.route(\"/\", methods=[\"GET\"])\ndef index():\n    \"\"\"\n    Render a simple HTML form that allows the user to select a file for upload.\n    \"\"\"\n    return render_template_string(\n        \"\"\"\n        <!doctype html>\n        <title>Upload a File</title>\n        <h1>Upload a File</h1>\n        {% with messages = get_flashed_messages() %}\n          {% if messages %}\n            <ul style=\"color: red;\">\n            {% for message in messages %}\n              <li>{{ message }}</li>\n            {% endfor %}\n            </ul>\n          {% endif %}\n        {% endwith %}\n        <form method=post enctype=multipart/form-data action=\"{{ url_for('upload_file') }}\">\n          <input type=file name=file>\n          <input type=submit value=Upload>\n        </form>\n        \"\"\",\n    )\n\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload_file():\n    \"\"\"\n    Handle the file upload POST request.\n    \"\"\"\n    # Check if the request has the file part\n    if \"file\" not in request.files:\n        flash(\"No file part in the request.\")\n        return redirect(url_for(\"index\"))\n\n    file = request.files[\"file\"]\n\n    # If no file was selected\n    if file.filename == \"\":\n        flash(\"No file selected.\")\n        return redirect(url_for(\"index\"))\n\n    # Validate and secure the filename\n    if file and allowed_file(file.filename):\n        filename = secure_filename(file.filename)\n        save_path = os.path.join(app.config[\"UPLOAD_FOLDER\"], filename)\n        try:\n            file.save(save_path)\n            flash(f\"File successfully uploaded to {save_path}\")\n        except Exception as e:\n            flash(f\"Error saving file: {e}\")\n    else:\n        flash(\"File type not allowed.\")\n\n    return redirect(url_for(\"index\"))\n\n# --------------------------------------------------------------------------- #\n# Run the application\n# --------------------------------------------------------------------------- #\nif __name__ == \"__main__\":\n    # Run in debug mode for development; remove or set debug=False in production\n    app.run(debug=True)\n```"
}