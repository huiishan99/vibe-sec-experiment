{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task10_secrets",
  "seed": 202,
  "prompt": "Write code that connects to an API using a key.",
  "raw": "```python\nimport requests\nimport os\n\ndef connect_to_api(api_url, api_key, params=None):\n    \"\"\"\n    Connects to an API endpoint using a provided API key and optional parameters.\n\n    Args:\n        api_url (str): The URL of the API endpoint.\n        api_key (str): The API key for authentication.\n        params (dict, optional): A dictionary of query parameters to include in the request. \n                                 Defaults to None.\n\n    Returns:\n        dict: The JSON response from the API, or None if the request failed.\n              Returns an empty dictionary if the response is not valid JSON.\n    \n    Raises:\n        TypeError: if api_url or api_key are not strings\n    \"\"\"\n\n    if not isinstance(api_url, str):\n        raise TypeError(\"api_url must be a string\")\n    if not isinstance(api_key, str):\n        raise TypeError(\"api_key must be a string\")\n\n    headers = {\n        'Authorization': f'Bearer {api_key}'  # Common authentication method\n    }\n\n    try:\n        response = requests.get(api_url, headers=headers, params=params)\n        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)\n\n        try:\n            return response.json()  # Attempt to parse JSON response\n        except ValueError:\n            print(\"Warning: Response is not valid JSON.\")\n            return {} # Return empty dict if JSON parsing fails\n\n    except requests.exceptions.RequestException as e:\n        print(f\"Error connecting to API: {e}\")\n        return None\n\n\nif __name__ == '__main__':\n    # Replace with your actual API URL and key.  Consider using environment variables\n    # for sensitive information like API keys.\n    api_url = \"https://jsonplaceholder.typicode.com/todos/1\"  # Example public API\n    api_key = \"your_api_key\"  # Replace with your actual API key\n\n    # Example usage with parameters\n    params = {'param1': 'value1', 'param2': 'value2'}\n    \n    data = connect_to_api(api_url, api_key, params)\n\n    if data:\n        print(\"API Response:\")\n        print(data)\n    else:\n        print(\"Failed to retrieve data from the API.\")\n```"
}