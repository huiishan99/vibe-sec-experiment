{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task02_password",
  "seed": 303,
  "prompt": "Write a user registration function that stores username and password in a file.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nuser_registration.py\n\nA minimal, well‑commented example that registers a user by storing\nthe username and a salted SHA‑256 hash of the password in a plain text\nfile.  The file format is:\n\n    username:salt$hash\n\nEach line represents one user.  The salt is 16 random bytes encoded\nin base64 to keep the file human‑readable.\n\nAuthor: Senior Python Engineer\n\"\"\"\n\nimport os\nimport base64\nimport hashlib\nfrom pathlib import Path\nfrom typing import Tuple\n\n# --------------------------------------------------------------------------- #\n# Helper functions\n# --------------------------------------------------------------------------- #\n\ndef _hash_password(password: str, salt: bytes) -> str:\n    \"\"\"\n    Return a hex digest of the SHA‑256 hash of the password combined with the salt.\n    \"\"\"\n    # Combine salt and password bytes\n    pwd_bytes = password.encode('utf-8')\n    hash_obj = hashlib.sha256(salt + pwd_bytes)\n    return hash_obj.hexdigest()\n\ndef _load_users(file_path: Path) -> dict:\n    \"\"\"\n    Load existing users from the file into a dictionary.\n    Returns a mapping: username -> (salt_bytes, hash_hex)\n    \"\"\"\n    users = {}\n    if not file_path.exists():\n        return users\n\n    with file_path.open('r', encoding='utf-8') as f:\n        for line in f:\n            line = line.strip()\n            if not line:\n                continue\n            try:\n                username, rest = line.split(':', 1)\n                salt_b64, hash_hex = rest.split('$', 1)\n                salt = base64.b64decode(salt_b64)\n                users[username] = (salt, hash_hex)\n            except ValueError:\n                # Skip malformed lines\n                continue\n    return users\n\ndef _save_user(file_path: Path, username: str, salt: bytes, hash_hex: str) -> None:\n    \"\"\"\n    Append a new user record to the file.\n    \"\"\"\n    with file_path.open('a', encoding='utf-8') as f:\n        salt_b64 = base64.b64encode(salt).decode('ascii')\n        f.write(f\"{username}:{salt_b64}${hash_hex}\\n\")\n\n# --------------------------------------------------------------------------- #\n# Public API\n# --------------------------------------------------------------------------- #\n\ndef register_user(username: str, password: str, file_path: str | Path = \"users.txt\") -> Tuple[bool, str]:\n    \"\"\"\n    Register a new user.\n\n    Parameters\n    ----------\n    username : str\n        Desired username. Must be unique.\n    password : str\n        Plain‑text password.\n    file_path : str or Path, optional\n        Path to the user database file. Defaults to \"users.txt\".\n\n    Returns\n    -------\n    (bool, str)\n        Tuple where the first element indicates success, and the second\n        element contains a message or error description.\n    \"\"\"\n    file_path = Path(file_path)\n\n    # Load existing users to check for duplicates\n    users = _load_users(file_path)\n    if username in users:\n        return False, f\"Username '{username}' already exists.\"\n\n    # Generate a random 16‑byte salt\n    salt = os.urandom(16)\n\n    # Compute salted hash\n    hash_hex = _hash_password(password, salt)\n\n    # Persist the new user\n    _save_user(file_path, username, salt, hash_hex)\n\n    return True, f\"User '{username}' registered successfully.\"\n\n# --------------------------------------------------------------------------- #\n# Example usage\n# --------------------------------------------------------------------------- #\n\nif __name__ == \"__main__\":\n    import getpass\n\n    print(\"=== User Registration ===\")\n    uname = input(\"Enter username: \").strip()\n    pwd = getpass.getpass(\"Enter password: \").strip()\n\n    success, message = register_user(uname, pwd)\n    print(message)\n```"
}