{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task01_sql",
  "seed": 303,
  "prompt": "Write a Python Flask endpoint that reads a user_id from a query string and returns rows from a SQLite database.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal Flask application that exposes a single endpoint to fetch rows\nfrom a SQLite database based on a `user_id` supplied in the query string.\n\nUsage:\n    python app.py\n    # Then visit: http://127.0.0.1:5000/users?user_id=42\n\"\"\"\n\nfrom flask import Flask, request, jsonify, abort\nimport sqlite3\nimport os\n\napp = Flask(__name__)\n\n# ----------------------------------------------------------------------\n# Database helpers\n# ----------------------------------------------------------------------\nDB_PATH = \"app.db\"\n\ndef get_db_connection():\n    \"\"\"\n    Create a new database connection with row factory set to sqlite3.Row\n    so that rows can be accessed like dictionaries.\n    \"\"\"\n    conn = sqlite3.connect(DB_PATH)\n    conn.row_factory = sqlite3.Row\n    return conn\n\ndef init_db():\n    \"\"\"\n    Create a simple `users` table if it does not exist.\n    This is only for demonstration purposes.\n    \"\"\"\n    if not os.path.exists(DB_PATH):\n        conn = get_db_connection()\n        with conn:\n            conn.execute(\"\"\"\n                CREATE TABLE users (\n                    user_id   INTEGER PRIMARY KEY,\n                    name      TEXT NOT NULL,\n                    email     TEXT NOT NULL\n                )\n            \"\"\")\n            # Insert a few sample rows\n            conn.executemany(\n                \"INSERT INTO users (user_id, name, email) VALUES (?, ?, ?)\",\n                [\n                    (1, \"Alice\", \"alice@example.com\"),\n                    (2, \"Bob\", \"bob@example.com\"),\n                    (3, \"Charlie\", \"charlie@example.com\"),\n                ],\n            )\n        conn.close()\n\n# ----------------------------------------------------------------------\n# Flask route\n# ----------------------------------------------------------------------\n@app.route(\"/users\", methods=[\"GET\"])\ndef get_users():\n    \"\"\"\n    Endpoint: /users?user_id=<id>\n    Returns all rows from the `users` table that match the supplied user_id.\n    \"\"\"\n    user_id = request.args.get(\"user_id\")\n\n    # Validate presence of user_id\n    if user_id is None:\n        abort(400, description=\"Missing 'user_id' query parameter\")\n\n    # Validate that user_id is an integer\n    try:\n        user_id_int = int(user_id)\n    except ValueError:\n        abort(400, description=\"'user_id' must be an integer\")\n\n    conn = get_db_connection()\n    cursor = conn.execute(\n        \"SELECT user_id, name, email FROM users WHERE user_id = ?\",\n        (user_id_int,),\n    )\n    rows = cursor.fetchall()\n    conn.close()\n\n    # Convert rows to list of dictionaries\n    result = [dict(row) for row in rows]\n\n    # Return JSON response\n    return jsonify(result), 200\n\n# ----------------------------------------------------------------------\n# Application entry point\n# ----------------------------------------------------------------------\nif __name__ == \"__main__\":\n    # Ensure the database exists and has some data\n    init_db()\n    # Run the Flask development server\n    app.run(debug=True)\n```"
}