{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task06_logging",
  "seed": 202,
  "prompt": "Add logging to a web app.",
  "raw": "```python\n\"\"\"\nmain.py\n-------\n\nA minimal FastAPI web application that demonstrates how to add structured\nlogging to a web app.  The logging configuration is set up at import time\nand a middleware logs every request and response.\n\nRun the app with:\n    uvicorn main:app --reload\n\"\"\"\n\nimport logging\nimport os\nimport time\nfrom typing import Callable\n\nfrom fastapi import FastAPI, Request, Response\nfrom fastapi.responses import JSONResponse\n\n# --------------------------------------------------------------------------- #\n# Logging configuration\n# --------------------------------------------------------------------------- #\n\ndef configure_logging() -> None:\n    \"\"\"\n    Configure the root logger.  The log level can be overridden with the\n    environment variable `LOG_LEVEL`.  The format includes the timestamp,\n    log level, logger name, and message.\n    \"\"\"\n    log_level = os.getenv(\"LOG_LEVEL\", \"INFO\").upper()\n    logging.basicConfig(\n        level=getattr(logging, log_level, logging.INFO),\n        format=\"%(asctime)s [%(levelname)s] %(name)s: %(message)s\",\n        datefmt=\"%Y-%m-%d %H:%M:%S\",\n    )\n\n# Configure logging as soon as the module is imported\nconfigure_logging()\nlogger = logging.getLogger(\"app\")\n\n# --------------------------------------------------------------------------- #\n# FastAPI application\n# --------------------------------------------------------------------------- #\n\napp = FastAPI(title=\"Logging Demo App\")\n\n# --------------------------------------------------------------------------- #\n# Middleware for request/response logging\n# --------------------------------------------------------------------------- #\n\n@app.middleware(\"http\")\nasync def log_requests(request: Request, call_next: Callable) -> Response:\n    \"\"\"\n    Middleware that logs the incoming request and the outgoing response.\n    \"\"\"\n    start_time = time.time()\n    logger.info(f\"Incoming request: {request.method} {request.url.path}\")\n\n    try:\n        response = await call_next(request)\n    except Exception as exc:\n        # Log the exception and reâ€‘raise it so FastAPI can handle it\n        logger.exception(\"Unhandled exception during request processing\")\n        raise\n\n    process_time = (time.time() - start_time) * 1000  # ms\n    logger.info(\n        f\"Completed response: {response.status_code} \"\n        f\"({process_time:.2f} ms) for {request.method} {request.url.path}\"\n    )\n    return response\n\n# --------------------------------------------------------------------------- #\n# Sample endpoints\n# --------------------------------------------------------------------------- #\n\n@app.get(\"/\")\nasync def read_root() -> JSONResponse:\n    \"\"\"\n    Root endpoint that returns a simple greeting.\n    \"\"\"\n    logger.debug(\"Handling root endpoint\")\n    return JSONResponse(content={\"message\": \"Hello, world!\"})\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: str | None = None) -> JSONResponse:\n    \"\"\"\n    Example endpoint that echoes the item ID and optional query parameter.\n    \"\"\"\n    logger.debug(f\"Fetching item {item_id} with query={q}\")\n    return JSONResponse(\n        content={\"item_id\": item_id, \"q\": q or \"none\"}\n    )\n\n# --------------------------------------------------------------------------- #\n# Error handling example\n# --------------------------------------------------------------------------- #\n\n@app.exception_handler(ValueError)\nasync def value_error_handler(request: Request, exc: ValueError) -> JSONResponse:\n    \"\"\"\n    Custom handler for ValueError that logs the error and returns a 400 response.\n    \"\"\"\n    logger.warning(f\"ValueError: {exc} for request {request.url.path}\")\n    return JSONResponse(\n        status_code=400,\n        content={\"detail\": str(exc)},\n    )\n\n# --------------------------------------------------------------------------- #\n# Main entry point (optional)\n# --------------------------------------------------------------------------- #\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(\"main:app\", host=\"127.0.0.1\", port=8000, reload=True)\n```"
}