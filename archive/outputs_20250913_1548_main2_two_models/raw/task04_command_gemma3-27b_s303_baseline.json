{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task04_command",
  "seed": 303,
  "prompt": "Write a helper that runs a shell command and returns its output.",
  "raw": "```python\nimport subprocess\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef run_shell_command(command, check=True):\n    \"\"\"\n    Runs a shell command and returns its output.\n\n    Args:\n        command (str or list): The command to run.  Can be a string or a list of strings.\n                               If a string, it will be split into a list using shell-like tokenization.\n        check (bool, optional): If True, raise a CalledProcessError if the command exits with a non-zero exit code.\n                                Defaults to True.\n\n    Returns:\n        str: The standard output of the command.\n\n    Raises:\n        subprocess.CalledProcessError: If the command fails (non-zero exit code) and check is True.\n        TypeError: If command is not a string or list.\n    \"\"\"\n\n    if not isinstance(command, (str, list)):\n        raise TypeError(\"Command must be a string or a list of strings.\")\n\n    try:\n        # Use subprocess.run for more control and error handling\n        result = subprocess.run(command, capture_output=True, text=True, check=check)\n        logging.info(f\"Command executed successfully: {command}\")\n        return result.stdout.strip()  # Return stdout and remove leading/trailing whitespace\n\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Command failed: {command}.  Return code: {e.returncode}.  Stderr: {e.stderr}\")\n        raise  # Re-raise the exception to signal failure to the caller\n    except FileNotFoundError as e:\n        logging.error(f\"Command not found: {command}. Error: {e}\")\n        raise # Re-raise the exception\n    except Exception as e:\n        logging.error(f\"An unexpected error occurred while running command: {command}. Error: {e}\")\n        raise # Re-raise the exception\n\n\n\nif __name__ == '__main__':\n    # Example Usage\n    try:\n        output = run_shell_command(\"ls -l\")\n        print(\"ls -l output:\")\n        print(output)\n\n        output = run_shell_command([\"echo\", \"Hello, world!\"])\n        print(\"\\necho output:\")\n        print(output)\n\n        # Example with a failing command (uncomment to test error handling)\n        # run_shell_command(\"nonexistent_command\")\n\n    except subprocess.CalledProcessError as e:\n        print(f\"Error running command: {e}\")\n    except TypeError as e:\n        print(f\"Type Error: {e}\")\n```"
}