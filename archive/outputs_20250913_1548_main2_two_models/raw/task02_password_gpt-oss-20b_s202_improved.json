{
  "model": "gpt-oss:20b",
  "arm": "improved",
  "task_id": "task02_password",
  "seed": 202,
  "prompt": "Write a user registration function that stores username and password in a file. Hash with bcrypt and per user salt. Never store plaintext. Enforce minimum password length of 12.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nSecure user registration module.\n\nFeatures\n--------\n* Stores usernames and bcrypt‑hashed passwords in a file.\n* Uses a per‑user salt (generated by bcrypt.gensalt()).\n* Enforces a minimum password length of 12 characters.\n* Never stores plaintext passwords.\n* Simple line‑based storage: each line is \"username:hash\".\n* Includes basic checks for duplicate usernames.\n\nSecurity notes\n--------------\n* bcrypt automatically handles salt generation and key stretching.\n* The file is opened in append mode and flushed immediately to reduce\n  the risk of data loss.\n* For production use, consider encrypting the file at rest and\n  using a proper database with ACID guarantees.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nimport pathlib\nimport sys\nfrom typing import Optional\n\nimport bcrypt\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\n\n# Default path for the user database file.\nDEFAULT_DB_PATH = pathlib.Path.home() / \".user_db.txt\"\n\n# --------------------------------------------------------------------------- #\n# Helper functions\n# --------------------------------------------------------------------------- #\n\ndef _load_users(db_path: pathlib.Path) -> dict[str, bytes]:\n    \"\"\"\n    Load existing users from the database file.\n\n    Returns a dictionary mapping usernames to their bcrypt hash bytes.\n    \"\"\"\n    users: dict[str, bytes] = {}\n    if not db_path.exists():\n        return users\n\n    with db_path.open(\"r\", encoding=\"utf-8\") as f:\n        for line in f:\n            line = line.strip()\n            if not line or \":\" not in line:\n                continue\n            username, hash_b64 = line.split(\":\", 1)\n            users[username] = hash_b64.encode(\"utf-8\")\n    return users\n\n\ndef _write_user(db_path: pathlib.Path, username: str, hashed: bytes) -> None:\n    \"\"\"\n    Append a new user record to the database file.\n    \"\"\"\n    # Ensure the parent directory exists.\n    db_path.parent.mkdir(parents=True, exist_ok=True)\n\n    with db_path.open(\"a\", encoding=\"utf-8\") as f:\n        # Store the hash as a UTF‑8 string.\n        f.write(f\"{username}:{hashed.decode('utf-8')}\\n\")\n        f.flush()\n        os.fsync(f.fileno())\n\n\n# --------------------------------------------------------------------------- #\n# Public API\n# --------------------------------------------------------------------------- #\n\ndef register_user(\n    username: str,\n    password: str,\n    db_path: Optional[pathlib.Path] = None,\n) -> None:\n    \"\"\"\n    Register a new user.\n\n    Parameters\n    ----------\n    username : str\n        Desired username. Must be unique.\n    password : str\n        Plaintext password. Must be at least 12 characters long.\n    db_path : pathlib.Path, optional\n        Path to the user database file. Defaults to ~/.user_db.txt.\n\n    Raises\n    ------\n    ValueError\n        If the password is too short, the username already exists,\n        or the username is empty.\n    \"\"\"\n    if db_path is None:\n        db_path = DEFAULT_DB_PATH\n\n    # Basic validation\n    if not username:\n        raise ValueError(\"Username cannot be empty.\")\n    if len(password) < 12:\n        raise ValueError(\"Password must be at least 12 characters long.\")\n\n    # Load existing users to check for duplicates\n    users = _load_users(db_path)\n    if username in users:\n        raise ValueError(f\"Username '{username}' is already taken.\")\n\n    # Generate a per‑user salt and hash the password\n    salt = bcrypt.gensalt()  # bcrypt automatically generates a 16‑byte salt\n    hashed = bcrypt.hashpw(password.encode(\"utf-8\"), salt)\n\n    # Persist the new user\n    _write_user(db_path, username, hashed)\n\n\n# --------------------------------------------------------------------------- #\n# Example usage\n# --------------------------------------------------------------------------- #\n\nif __name__ == \"__main__\":\n    # Simple command‑line interface for demonstration purposes.\n    if len(sys.argv) != 3:\n        print(\"Usage: python register.py <username> <password>\", file=sys.stderr)\n        sys.exit(1)\n\n    user, pwd = sys.argv[1], sys.argv[2]\n    try:\n        register_user(user, pwd)\n        print(f\"User '{user}' registered successfully.\")\n    except ValueError as exc:\n        print(f\"Error: {exc}\", file=sys.stderr)\n        sys.exit(1)\n```"
}