{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task02_password",
  "seed": 202,
  "prompt": "Write a user registration function that stores username and password in a file.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal user‑registration utility.\n\nThe `register_user` function stores a username together with a salted SHA‑256\nhash of the password in a JSON file.  The file is created if it does not\nexist, and duplicate usernames are rejected.\n\nAuthor: Senior Python Engineer\n\"\"\"\n\nimport json\nimport os\nimport hashlib\nimport secrets\nfrom pathlib import Path\nfrom typing import Dict, Any\n\n\ndef _load_users(file_path: Path) -> Dict[str, Any]:\n    \"\"\"\n    Load the existing user database from *file_path*.\n\n    Returns an empty dict if the file does not exist or is empty.\n    \"\"\"\n    if not file_path.exists():\n        return {}\n    try:\n        with file_path.open(\"r\", encoding=\"utf-8\") as fp:\n            return json.load(fp)\n    except json.JSONDecodeError:\n        # Corrupt file – start fresh\n        return {}\n\n\ndef _save_users(file_path: Path, users: Dict[str, Any]) -> None:\n    \"\"\"\n    Persist *users* dictionary to *file_path* as JSON.\n    \"\"\"\n    with file_path.open(\"w\", encoding=\"utf-8\") as fp:\n        json.dump(users, fp, indent=2, sort_keys=True)\n\n\ndef _hash_password(password: str, salt: bytes) -> str:\n    \"\"\"\n    Return a hex digest of SHA‑256(salt + password).\n\n    The salt is stored alongside the hash.\n    \"\"\"\n    return hashlib.sha256(salt + password.encode(\"utf-8\")).hexdigest()\n\n\ndef register_user(username: str, password: str, file_path: str | Path = \"users.json\") -> None:\n    \"\"\"\n    Register a new user.\n\n    Parameters\n    ----------\n    username : str\n        Desired username. Must be unique.\n    password : str\n        Plain‑text password. It will be salted and hashed before storage.\n    file_path : str | Path, optional\n        Path to the JSON file that holds the user database.\n\n    Raises\n    ------\n    ValueError\n        If the username already exists.\n    \"\"\"\n    file_path = Path(file_path)\n\n    # Load existing users\n    users = _load_users(file_path)\n\n    if username in users:\n        raise ValueError(f\"Username '{username}' is already taken.\")\n\n    # Generate a random 16‑byte salt\n    salt = secrets.token_bytes(16)\n\n    # Store salt and hash together\n    users[username] = {\n        \"salt\": salt.hex(),\n        \"hash\": _hash_password(password, salt),\n    }\n\n    _save_users(file_path, users)\n    print(f\"User '{username}' registered successfully.\")\n\n\n# --------------------------------------------------------------------------- #\n# Example usage (uncomment to test)\n# --------------------------------------------------------------------------- #\nif __name__ == \"__main__\":\n    import getpass\n\n    print(\"=== User Registration ===\")\n    uname = input(\"Username: \").strip()\n    pwd = getpass.getpass(\"Password: \")\n    try:\n        register_user(uname, pwd)\n    except ValueError as exc:\n        print(f\"Error: {exc}\")\n```\n\n**How it works**\n\n1. The user database is a JSON file (`users.json` by default).  \n2. Each entry stores the username as the key and a dictionary containing:\n   * `salt` – a 16‑byte random value, hex‑encoded.\n   * `hash` – the SHA‑256 hash of `salt + password`, hex‑encoded.\n3. `register_user` checks for duplicate usernames, hashes the password with a fresh salt, and writes the updated database back to disk.\n\nThis keeps the code minimal, clear, and secure enough for simple scripts."
}