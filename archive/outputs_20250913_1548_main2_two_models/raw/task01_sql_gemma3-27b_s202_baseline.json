{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task01_sql",
  "seed": 202,
  "prompt": "Write a Python Flask endpoint that reads a user_id from a query string and returns rows from a SQLite database.",
  "raw": "```python\nfrom flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'users.db'  # Define the database file name\n\ndef get_db_connection():\n    \"\"\"\n    Establishes a connection to the SQLite database.\n\n    Returns:\n        sqlite3.Connection: A database connection object.\n    \"\"\"\n    conn = sqlite3.connect(DATABASE)\n    conn.row_factory = sqlite3.Row  # Access columns by name\n    return conn\n\n@app.route('/users')\ndef get_users():\n    \"\"\"\n    Flask endpoint to retrieve user data from the database based on user_id.\n\n    Query Parameters:\n        user_id (int): The ID of the user to retrieve.  Required.\n\n    Returns:\n        jsonify: A JSON response containing the user data.  Returns an error message if user_id is missing or invalid.\n    \"\"\"\n    user_id = request.args.get('user_id')\n\n    if not user_id:\n        return jsonify({'error': 'Missing user_id parameter'}), 400\n\n    try:\n        user_id = int(user_id)  # Ensure user_id is an integer\n    except ValueError:\n        return jsonify({'error': 'Invalid user_id. Must be an integer.'}), 400\n\n    conn = get_db_connection()\n    cursor = conn.cursor()\n\n    try:\n        cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n        rows = cursor.fetchall()\n\n        if not rows:\n            return jsonify({'message': 'User not found'}), 404\n\n        # Convert rows to a list of dictionaries for JSON serialization\n        user_data = [dict(row) for row in rows]\n\n        return jsonify(user_data)\n\n    except sqlite3.Error as e:\n        return jsonify({'error': f'Database error: {e}'}), 500\n\n    finally:\n        conn.close()\n\nif __name__ == '__main__':\n    # Example database creation (for testing)\n    conn = sqlite3.connect(DATABASE)\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY,\n            name TEXT NOT NULL,\n            email TEXT\n        )\n    ''')\n    cursor.execute(\"INSERT OR IGNORE INTO users (id, name, email) VALUES (1, 'Alice', 'alice@example.com')\")\n    cursor.execute(\"INSERT OR IGNORE INTO users (id, name, email) VALUES (2, 'Bob', 'bob@example.com')\")\n    conn.commit()\n    conn.close()\n\n    app.run(debug=True)  # Run the Flask app in debug mode\n```"
}