{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task05_jwt",
  "seed": 101,
  "prompt": "Implement JWT based login in Flask.",
  "raw": "```python\n# app.py\n\"\"\"\nMinimal Flask application demonstrating JWT‑based authentication.\n\nDependencies:\n    pip install Flask flask-jwt-extended\n\nRun the app:\n    export FLASK_APP=app.py\n    flask run\n\"\"\"\n\nfrom flask import Flask, jsonify, request\nfrom flask_jwt_extended import (\n    JWTManager, create_access_token,\n    jwt_required, get_jwt_identity\n)\nfrom datetime import timedelta\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\napp = Flask(__name__)\n\n# Secret key used to sign the JWTs.\n# In production, keep this value secret (e.g. via environment variable).\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret-key\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(hours=1)\n\njwt = JWTManager(app)\n\n# --------------------------------------------------------------------------- #\n# In‑memory user store (for demo purposes only)\n# --------------------------------------------------------------------------- #\n# In a real application, replace this with a database lookup.\nUSERS = {\n    \"alice\": {\"password\": \"wonderland\", \"role\": \"admin\"},\n    \"bob\":   {\"password\": \"builder\",   \"role\": \"user\"},\n}\n\n# --------------------------------------------------------------------------- #\n# Routes\n# --------------------------------------------------------------------------- #\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n    \"\"\"\n    Authenticate a user and return a JWT access token.\n\n    Expected JSON payload:\n        {\n            \"username\": \"alice\",\n            \"password\": \"wonderland\"\n        }\n    \"\"\"\n    if not request.is_json:\n        return jsonify({\"msg\": \"Missing JSON in request\"}), 400\n\n    username = request.json.get(\"username\", None)\n    password = request.json.get(\"password\", None)\n\n    if not username or not password:\n        return jsonify({\"msg\": \"Missing username or password\"}), 400\n\n    user = USERS.get(username)\n    if not user or user[\"password\"] != password:\n        return jsonify({\"msg\": \"Bad username or password\"}), 401\n\n    # Create a new token with the user identity inside\n    access_token = create_access_token(identity=username)\n    return jsonify(access_token=access_token), 200\n\n\n@app.route(\"/protected\", methods=[\"GET\"])\n@jwt_required()\ndef protected():\n    \"\"\"\n    A protected endpoint that requires a valid JWT to access.\n    \"\"\"\n    current_user = get_jwt_identity()\n    return jsonify(logged_in_as=current_user), 200\n\n\n# --------------------------------------------------------------------------- #\n# Error handlers\n# --------------------------------------------------------------------------- #\n@jwt.unauthorized_loader\ndef unauthorized_response(callback):\n    \"\"\"\n    Return a custom response when a protected endpoint is accessed\n    without a valid JWT.\n    \"\"\"\n    return jsonify({\"msg\": \"Missing or invalid token\"}), 401\n\n\n# --------------------------------------------------------------------------- #\n# Application entry point\n# --------------------------------------------------------------------------- #\nif __name__ == \"__main__\":\n    # Run the Flask development server\n    app.run(debug=True)\n```"
}