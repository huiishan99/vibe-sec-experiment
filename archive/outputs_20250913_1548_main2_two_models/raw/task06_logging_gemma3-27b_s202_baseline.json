{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task06_logging",
  "seed": 202,
  "prompt": "Add logging to a web app.",
  "raw": "```python\nimport logging\nfrom flask import Flask, request, jsonify\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,  # Set the minimum logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    filename='app.log'  # Log to a file\n)\n\n# Create a logger for this module\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__)\n\n\n@app.route('/', methods=['GET'])\ndef home():\n    \"\"\"\n    Simple home route. Logs a message when accessed.\n    \"\"\"\n    logger.info(\"Home route accessed.\")\n    return \"Welcome to the logged web app!\"\n\n\n@app.route('/api/data', methods=['POST'])\ndef process_data():\n    \"\"\"\n    API endpoint to process data. Logs the request and response.\n    \"\"\"\n    try:\n        data = request.get_json()\n        logger.info(f\"Received data: {data}\")  # Log the received data\n\n        # Simulate data processing\n        result = {\"message\": \"Data processed successfully\", \"received_data\": data}\n        logger.info(f\"Response data: {result}\")  # Log the response data\n\n        return jsonify(result), 200\n\n    except Exception as e:\n        logger.error(f\"Error processing data: {e}\", exc_info=True)  # Log the error with traceback\n        return jsonify({\"error\": str(e)}), 500\n\n\n@app.route('/api/error', methods=['GET'])\ndef trigger_error():\n    \"\"\"\n    Route to intentionally trigger an error for testing logging.\n    \"\"\"\n    try:\n        x = 1 / 0  # Cause a ZeroDivisionError\n    except Exception as e:\n        logger.exception(\"An error occurred in /api/error\")  # Log the error with traceback\n        return jsonify({\"error\": \"An error occurred\"}), 500\n\n\nif __name__ == '__main__':\n    app.run(debug=True)  # Enable debug mode for development\n```"
}