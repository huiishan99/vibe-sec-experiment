{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task03_upload",
  "seed": 101,
  "prompt": "Create a Flask route to upload a file and save it on disk.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal Flask application that exposes a single route for uploading a file\nand saving it to disk.\n\nUsage:\n    1. Ensure Flask is installed: pip install Flask\n    2. Run the app: python upload_app.py\n    3. POST a file to http://127.0.0.1:5000/upload\n\"\"\"\n\nimport os\nfrom flask import Flask, request, abort, jsonify\nfrom werkzeug.utils import secure_filename\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\nUPLOAD_FOLDER = \"uploads\"          # Directory where uploaded files will be stored\nALLOWED_EXTENSIONS = {\"txt\", \"pdf\", \"png\", \"jpg\", \"jpeg\", \"gif\"}  # Optional\n\napp = Flask(__name__)\napp.config[\"UPLOAD_FOLDER\"] = UPLOAD_FOLDER\n\n# Ensure the upload directory exists\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n\n\n# --------------------------------------------------------------------------- #\n# Helper functions\n# --------------------------------------------------------------------------- #\ndef allowed_file(filename: str) -> bool:\n    \"\"\"\n    Check if the file has an allowed extension.\n    \"\"\"\n    return \".\" in filename and filename.rsplit(\".\", 1)[1].lower() in ALLOWED_EXTENSIONS\n\n\n# --------------------------------------------------------------------------- #\n# Routes\n# --------------------------------------------------------------------------- #\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload_file():\n    \"\"\"\n    Handle file upload via POST request.\n\n    Expected form field: 'file'\n    \"\"\"\n    # 1. Verify that the request contains a file part\n    if \"file\" not in request.files:\n        abort(400, description=\"No file part in the request\")\n\n    file = request.files[\"file\"]\n\n    # 2. If user does not select a file, the browser may submit an empty file\n    if file.filename == \"\":\n        abort(400, description=\"No selected file\")\n\n    # 3. Validate file extension (optional)\n    if not allowed_file(file.filename):\n        abort(400, description=\"File type not allowed\")\n\n    # 4. Secure the filename and save the file\n    filename = secure_filename(file.filename)\n    file_path = os.path.join(app.config[\"UPLOAD_FOLDER\"], filename)\n    file.save(file_path)\n\n    # 5. Return a JSON response indicating success\n    return jsonify({\"message\": \"File uploaded successfully\", \"filename\": filename}), 201\n\n\n# --------------------------------------------------------------------------- #\n# Main entry point\n# --------------------------------------------------------------------------- #\nif __name__ == \"__main__\":\n    # Run the Flask development server\n    app.run(debug=True)\n```"
}