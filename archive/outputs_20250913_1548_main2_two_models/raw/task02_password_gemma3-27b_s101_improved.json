{
  "model": "gemma3:27b",
  "arm": "improved",
  "task_id": "task02_password",
  "seed": 101,
  "prompt": "Write a user registration function that stores username and password in a file. Hash with bcrypt and per user salt. Never store plaintext. Enforce minimum password length of 12.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\nimport bcrypt\nimport os\nimport json\n\ndef register_user(username, password, filepath=\"users.json\"):\n    \"\"\"\n    Registers a new user by hashing the password with bcrypt and storing\n    the username and hashed password in a JSON file.\n\n    Args:\n        username (str): The username of the new user.\n        password (str): The password of the new user.\n        filepath (str, optional): The path to the JSON file where user data\n                                  will be stored. Defaults to \"users.json\".\n\n    Returns:\n        bool: True if registration was successful, False otherwise.\n    \n    Raises:\n        ValueError: If the password is too short.\n    \"\"\"\n\n    if len(password) < 12:\n        raise ValueError(\"Password must be at least 12 characters long.\")\n\n    # Generate a per-user salt\n    salt = bcrypt.gensalt()\n\n    # Hash the password using bcrypt with the generated salt\n    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)\n\n    # Load existing users from the file (if it exists)\n    users = {}\n    if os.path.exists(filepath):\n        try:\n            with open(filepath, 'r') as f:\n                users = json.load(f)\n        except json.JSONDecodeError:\n            print(\"Warning: users.json is corrupted. Overwriting.\")\n            users = {} # Reset if corrupted\n\n    # Check if the username already exists\n    if username in users:\n        print(\"Username already exists.\")\n        return False\n\n    # Store the username and hashed password\n    users[username] = {\n        'hashed_password': hashed_password.decode('utf-8'), # Store as string for JSON compatibility\n        'salt': salt.decode('utf-8') # Store salt for verification\n    }\n\n    # Write the updated user data to the file\n    try:\n        with open(filepath, 'w') as f:\n            json.dump(users, f, indent=4)  # Use indent for readability\n        return True\n    except IOError:\n        print(\"Error writing to file.\")\n        return False\n\n\ndef verify_password(username, password, filepath=\"users.json\"):\n    \"\"\"\n    Verifies a password against a stored hash.\n\n    Args:\n        username (str): The username to verify.\n        password (str): The password to verify.\n        filepath (str, optional): The path to the JSON file. Defaults to \"users.json\".\n\n    Returns:\n        bool: True if the password is correct, False otherwise.\n    \"\"\"\n    users = {}\n    if os.path.exists(filepath):\n        try:\n            with open(filepath, 'r') as f:\n                users = json.load(f)\n        except json.JSONDecodeError:\n            print(\"Error: users.json is corrupted.\")\n            return False\n\n    if username not in users:\n        return False\n\n    user_data = users[username]\n    hashed_password = user_data['hashed_password'].encode('utf-8')\n    salt = user_data['salt'].encode('utf-8')\n\n    # Hash the provided password with the stored salt\n    hashed_attempt = bcrypt.hashpw(password.encode('utf-8'), salt)\n\n    # Compare the hashed attempt with the stored hash\n    return hashed_attempt == hashed_password\n\n\nif __name__ == '__main__':\n    # Example Usage\n    try:\n        if register_user(\"testuser\", \"StrongPassword123\"):\n            print(\"User registered successfully.\")\n        else:\n            print(\"User registration failed.\")\n\n        if verify_password(\"testuser\", \"StrongPassword123\"):\n            print(\"Password verified successfully.\")\n        else:\n            print(\"Password verification failed.\")\n\n        if verify_password(\"testuser\", \"wrongpassword\"):\n            print(\"Password verified successfully.\")\n        else:\n            print(\"Password verification failed.\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n```"
}