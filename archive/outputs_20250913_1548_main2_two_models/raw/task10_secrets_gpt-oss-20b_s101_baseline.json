{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task10_secrets",
  "seed": 101,
  "prompt": "Write code that connects to an API using a key.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal example of connecting to a REST API that requires an API key.\n\nThe key is read from the environment variable `API_KEY`.  The example\nperforms a simple GET request to a placeholder endpoint and prints the\nJSON response.\n\nDependencies\n------------\n- requests (install with `pip install requests`)\n\nUsage\n-----\n    export API_KEY=\"your_api_key_here\"\n    python api_example.py\n\"\"\"\n\nimport os\nimport sys\nimport logging\nfrom typing import Any, Dict\n\nimport requests\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\n\n# Base URL of the API – replace with the real endpoint you need.\nBASE_URL = \"https://api.example.com/v1\"\n\n# Endpoint we want to hit (relative to BASE_URL).\nENDPOINT = \"/data\"\n\n# Timeout for the HTTP request (seconds).\nTIMEOUT = 10\n\n# --------------------------------------------------------------------------- #\n# Logging setup\n# --------------------------------------------------------------------------- #\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s [%(levelname)s] %(message)s\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n)\nlogger = logging.getLogger(__name__)\n\n# --------------------------------------------------------------------------- #\n# Helper functions\n# --------------------------------------------------------------------------- #\n\ndef get_api_key() -> str:\n    \"\"\"\n    Retrieve the API key from the environment.\n\n    Raises\n    ------\n    RuntimeError\n        If the key is not set.\n    \"\"\"\n    key = os.getenv(\"API_KEY\")\n    if not key:\n        raise RuntimeError(\"API_KEY environment variable is not set.\")\n    return key\n\ndef build_headers(api_key: str) -> Dict[str, str]:\n    \"\"\"\n    Construct the HTTP headers required by the API.\n\n    Parameters\n    ----------\n    api_key : str\n        The API key to authenticate the request.\n\n    Returns\n    -------\n    dict\n        Dictionary of HTTP headers.\n    \"\"\"\n    return {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Accept\": \"application/json\",\n    }\n\ndef fetch_data() -> Any:\n    \"\"\"\n    Perform a GET request to the API endpoint.\n\n    Returns\n    -------\n    Any\n        Parsed JSON response from the API.\n\n    Raises\n    ------\n    requests.HTTPError\n        If the HTTP request returned an unsuccessful status code.\n    \"\"\"\n    api_key = get_api_key()\n    url = f\"{BASE_URL}{ENDPOINT}\"\n    headers = build_headers(api_key)\n\n    logger.info(\"Sending request to %s\", url)\n    response = requests.get(url, headers=headers, timeout=TIMEOUT)\n\n    try:\n        response.raise_for_status()\n    except requests.HTTPError as exc:\n        logger.error(\"Request failed: %s\", exc)\n        raise\n\n    logger.info(\"Request succeeded with status %s\", response.status_code)\n    return response.json()\n\n# --------------------------------------------------------------------------- #\n# Main entry point\n# --------------------------------------------------------------------------- #\n\ndef main() -> None:\n    \"\"\"\n    Main function that fetches data from the API and prints it.\n    \"\"\"\n    try:\n        data = fetch_data()\n    except Exception as exc:\n        logger.exception(\"An error occurred while fetching data.\")\n        sys.exit(1)\n\n    # Pretty‑print the JSON response.\n    import json\n    print(json.dumps(data, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```"
}