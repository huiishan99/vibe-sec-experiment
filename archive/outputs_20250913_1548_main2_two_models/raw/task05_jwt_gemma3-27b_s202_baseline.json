{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task05_jwt",
  "seed": 202,
  "prompt": "Implement JWT based login in Flask.",
  "raw": "```python\nfrom flask import Flask, request, jsonify\nimport jwt\nimport datetime\nfrom functools import wraps\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'your-secret-key'  # Replace with a strong, random key in production!\n\ndef generate_token(user_id):\n    \"\"\"\n    Generates a JWT token for a given user ID.\n    \"\"\"\n    payload = {\n        'user_id': user_id,\n        'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)  # Token expires in 30 minutes\n    }\n    token = jwt.encode(payload, app.config['SECRET_KEY'], algorithm='HS256')\n    return token\n\ndef verify_token(token):\n    \"\"\"\n    Verifies a JWT token and returns the user ID if valid, otherwise returns None.\n    \"\"\"\n    try:\n        payload = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])\n        return payload['user_id']\n    except jwt.ExpiredSignatureError:\n        return None  # Token has expired\n    except jwt.InvalidTokenError:\n        return None  # Invalid token\n\ndef token_required(f):\n    \"\"\"\n    Decorator to protect routes that require authentication.\n    \"\"\"\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        token = request.headers.get('Authorization')\n        if not token:\n            return jsonify({'message': 'Token is missing!'}), 401\n\n        try:\n            token = token.split(\" \")[1] # Remove \"Bearer \" prefix\n        except IndexError:\n            return jsonify({'message': 'Invalid token format.  Use Bearer <token>'}), 401\n\n        user_id = verify_token(token)\n        if not user_id:\n            return jsonify({'message': 'Token is invalid or expired!'}), 401\n\n        return f(user_id, *args, **kwargs)\n    return decorated\n\n# Example user data (replace with a database in a real application)\nusers = {\n    1: 'user1',\n    2: 'user2'\n}\n\n\n@app.route('/login', methods=['POST'])\ndef login():\n    \"\"\"\n    Logs in a user and returns a JWT token.\n    Expects username and password in the request body (JSON).\n    \"\"\"\n    data = request.get_json()\n    username = data.get('username')\n    password = data.get('password')\n\n    # In a real application, you would authenticate against a database.\n    # This is a simplified example.\n    if username == 'testuser' and password == 'password':\n        user_id = 1  # Assign a user ID\n        token = generate_token(user_id)\n        return jsonify({'token': token})\n    else:\n        return jsonify({'message': 'Invalid credentials'}), 401\n\n@app.route('/protected', methods=['GET'])\n@token_required\ndef protected(user_id):\n    \"\"\"\n    A protected route that requires a valid JWT token.\n    \"\"\"\n    return jsonify({'message': f'Hello, user {user_id}! This is a protected route.'})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
}