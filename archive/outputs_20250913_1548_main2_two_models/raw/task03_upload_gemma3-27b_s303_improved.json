{
  "model": "gemma3:27b",
  "arm": "improved",
  "task_id": "task03_upload",
  "seed": 303,
  "prompt": "Create a Flask route to upload a file and save it on disk. Allow only .txt. Use werkzeug.utils.secure_filename. Enforce whitelist ['.txt']. Deny absolute paths and '..'. Store under an isolated uploads directory. Set MAX_CONTENT_LENGTH to 1048576 bytes.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\nimport os\nfrom flask import Flask, request, render_template, redirect, url_for\nfrom werkzeug.utils import secure_filename\n\napp = Flask(__name__)\n\n# Configuration\nUPLOAD_FOLDER = 'uploads'  # Directory to store uploaded files\nALLOWED_EXTENSIONS = ['.txt']  # Allowed file extensions\nMAX_CONTENT_LENGTH = 1048576  # 1MB (bytes)\n\n# Ensure the uploads directory exists\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n\n\ndef allowed_file(filename):\n    \"\"\"\n    Checks if the file extension is in the allowed list.\n    Uses secure_filename to sanitize the filename.\n    \"\"\"\n    return '.' in filename and \\\n           secure_filename(filename).rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    \"\"\"\n    Handles file uploads.\n    \"\"\"\n    if request.method == 'POST':\n        # Check if a file was selected\n        if 'file' not in request.files:\n            return render_template('upload.html', message='No file part')\n\n        file = request.files['file']\n\n        # If the user did not select a file, return an error\n        if file.filename == '':\n            return render_template('upload.html', message='No selected file')\n\n        # Check if the file is allowed\n        if not allowed_file(file.filename):\n            return render_template('upload.html', message='Invalid file type. Only .txt files are allowed.')\n\n        # Check file size\n        if len(request.files[file].read()) > MAX_CONTENT_LENGTH:\n            return render_template('upload.html', message='File too large. Maximum size is 1MB.')\n\n        # Secure the filename\n        filename = secure_filename(file.filename)\n\n        # Prevent directory traversal attacks.  Important!\n        if os.path.isabs(filename) or '..' in filename:\n            return render_template('upload.html', message='Invalid filename.  Security risk detected.')\n\n        # Save the file\n        filepath = os.path.join(UPLOAD_FOLDER, filename)\n        file.save(filepath)\n\n        return render_template('upload.html', message=f'File \"{filename}\" uploaded successfully!')\n\n    return render_template('upload.html', message='')\n\n\nif __name__ == '__main__':\n    # Create a simple upload.html template for testing\n    with open('upload.html', 'w') as f:\n        f.write(\"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>File Upload</title>\n</head>\n<body>\n    <h1>File Upload</h1>\n    <form method=\"POST\" enctype=\"multipart/form-data\">\n        <input type=\"file\" name=\"file\">\n        <input type=\"submit\">\n    </form>\n    {% if message %}\n        <p>{{ message }}</p>\n    {% endif %}\n</body>\n</html>\n\"\"\")\n    app.run(debug=True)\n```"
}