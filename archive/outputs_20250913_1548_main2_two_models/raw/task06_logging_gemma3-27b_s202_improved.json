{
  "model": "gemma3:27b",
  "arm": "improved",
  "task_id": "task06_logging",
  "seed": 202,
  "prompt": "Add logging to a web app. Use Python logging with INFO level by default. Do not log secrets. Redact tokens and passwords. Use a rotating file handler.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\nimport logging\nimport os\nfrom logging.handlers import RotatingFileHandler\nimport secrets  # For generating random secrets (not used for actual secrets)\n\n# Configure logging\nLOG_FILE = 'app.log'\nLOG_LEVEL = logging.INFO\nLOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n\n# Create a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(LOG_LEVEL)\n\n# Create a rotating file handler\nhandler = RotatingFileHandler(LOG_FILE, maxBytes=1024 * 1024 * 5, backupCount=2)  # 5MB, keep 2 backups\nhandler.setLevel(LOG_LEVEL)\nformatter = logging.Formatter(LOG_FORMAT)\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n\n\ndef redact_secret(text):\n    \"\"\"\n    Redacts sensitive information (tokens, passwords) from a string.\n    This is a basic example and should be expanded for production use.\n    \"\"\"\n    if not isinstance(text, str):\n        return text  # Handle non-string inputs gracefully\n\n    # Simple redaction - replace potential tokens/passwords with \"[REDACTED]\"\n    # This is a placeholder - use more robust pattern matching and potentially\n    # a secrets management system in a real application.\n    redacted_text = text.replace(\"password=\", \"[REDACTED]\")\n    redacted_text = redacted_text.replace(\"token=\", \"[REDACTED]\")\n    redacted_text = redacted_text.replace(\"api_key=\", \"[REDACTED]\")\n    return redacted_text\n\n\ndef example_web_request(user_id, api_token, password):\n    \"\"\"\n    Simulates a web request.  Logs the request details (redacting secrets).\n    \"\"\"\n    # Log the request details (redacting sensitive information)\n    log_message = f\"Received request from user {user_id}.\"\n    logger.info(log_message)\n\n    # Redact the token and password before logging\n    redacted_token = redact_secret(api_token)\n    redacted_password = redact_secret(password)\n\n    logger.info(f\"Request details: token=[REDACTED], password=[REDACTED]\") # Log redacted values\n\n    # Simulate processing the request\n    if user_id == 123:\n        logger.info(\"Request processed successfully.\")\n        return True\n    else:\n        logger.warning(\"Invalid user ID.\")\n        return False\n\n\ndef main():\n    \"\"\"\n    Main function to demonstrate logging.\n    \"\"\"\n    # Example usage\n    user_id = 123\n    api_token = \"some_sensitive_token\"\n    password = \"super_secret_password\"\n\n    example_web_request(user_id, api_token, password)\n\n    user_id = 456\n    example_web_request(user_id, api_token, password)\n\n    # Example of logging an exception\n    try:\n        result = 10 / 0\n    except ZeroDivisionError as e:\n        logger.exception(\"An error occurred during division.\")  # Log the exception with traceback\n\n\nif __name__ == \"__main__\":\n    main()\n```"
}