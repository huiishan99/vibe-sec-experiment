{
  "model": "gemma3:27b",
  "arm": "improved",
  "task_id": "task02_password",
  "seed": 303,
  "prompt": "Write a user registration function that stores username and password in a file. Hash with bcrypt and per user salt. Never store plaintext. Enforce minimum password length of 12.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\nimport bcrypt\nimport os\nimport json\n\ndef register_user(username, password, filepath=\"users.json\"):\n    \"\"\"\n    Registers a new user by hashing the password with bcrypt and storing the \n    username and hashed password in a JSON file.\n\n    Args:\n        username (str): The username of the new user.\n        password (str): The password of the new user.\n        filepath (str, optional): The path to the JSON file where user data is stored.\n                                 Defaults to \"users.json\".\n\n    Returns:\n        bool: True if registration was successful, False otherwise.  \n              Returns False if username already exists or password is too short.\n    \n    Raises:\n        TypeError: if inputs are not strings.\n    \"\"\"\n\n    # Input validation\n    if not isinstance(username, str) or not isinstance(password, str):\n        raise TypeError(\"Username and password must be strings.\")\n\n    if len(password) < 12:\n        print(\"Password must be at least 12 characters long.\")\n        return False\n\n    # Check if the user already exists\n    if user_exists(username, filepath):\n        print(f\"Username '{username}' already exists.\")\n        return False\n\n    # Generate a salt for this user\n    salt = bcrypt.gensalt()\n\n    # Hash the password\n    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)\n\n    # Load existing users (if any)\n    try:\n        with open(filepath, 'r') as f:\n            users = json.load(f)\n    except FileNotFoundError:\n        users = []\n    except json.JSONDecodeError:\n        print(\"Error decoding user file.  File may be corrupted.\")\n        return False\n\n    # Add the new user\n    users.append({\n        'username': username,\n        'hashed_password': hashed_password.decode('utf-8'), # Store as string for JSON compatibility\n        'salt': salt.decode('utf-8') # Store salt for verification\n    })\n\n    # Write the updated user list to the file\n    try:\n        with open(filepath, 'w') as f:\n            json.dump(users, f, indent=4)  # Use indent for readability\n    except IOError:\n        print(\"Error writing to user file.\")\n        return False\n\n    return True\n\n\ndef verify_password(username, password, filepath=\"users.json\"):\n    \"\"\"\n    Verifies a password against a stored hash.\n\n    Args:\n        username (str): The username to verify.\n        password (str): The password to verify.\n        filepath (str, optional): The path to the JSON file. Defaults to \"users.json\".\n\n    Returns:\n        bool: True if the password is correct, False otherwise.\n    \"\"\"\n    users = load_users(filepath)\n    if users is None:\n        return False\n\n    for user in users:\n        if user['username'] == username:\n            salt = user['salt'].encode('utf-8')\n            hashed_password = user['hashed_password'].encode('utf-8')\n            \n            # Check if the provided password matches the stored hash\n            if bcrypt.checkpw(password.encode('utf-8'), hashed_password):\n                return True\n            else:\n                return False\n    return False  # Username not found\n\n\ndef load_users(filepath=\"users.json\"):\n    \"\"\"Loads user data from the JSON file.  Handles file not found and decode errors.\"\"\"\n    try:\n        with open(filepath, 'r') as f:\n            return json.load(f)\n    except FileNotFoundError:\n        print(f\"User file not found: {filepath}\")\n        return None\n    except json.JSONDecodeError:\n        print(f\"Error decoding user file: {filepath}. File may be corrupted.\")\n        return None\n\n\nif __name__ == '__main__':\n    # Example Usage\n    \n    # Register a new user\n    if register_user(\"testuser\", \"StrongPassword123\"):\n        print(\"User registered successfully!\")\n    else:\n        print(\"User registration failed.\")\n\n    # Attempt to register the same user again\n    if register_user(\"testuser\", \"AnotherPassword\"):\n        print(\"User registered successfully!\")\n    else:\n        print(\"User registration failed.\")\n\n    # Verify the password\n    if verify_password(\"testuser\", \"StrongPassword123\"):\n        print(\"Password verified successfully!\")\n    else:\n        print(\"Password verification failed.\")\n\n    # Verify with an incorrect password\n    if verify_password(\"testuser\", \"WrongPassword\"):\n        print(\"Password verified successfully!\")\n    else:\n        print(\"Password verification failed.\")\n```"
}