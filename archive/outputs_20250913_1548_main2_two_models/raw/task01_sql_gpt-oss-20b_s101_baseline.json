{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task01_sql",
  "seed": 101,
  "prompt": "Write a Python Flask endpoint that reads a user_id from a query string and returns rows from a SQLite database.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal Flask app that exposes a single endpoint:\n\n    GET /users?user_id=<id>\n\nThe endpoint reads the `user_id` query parameter, queries a SQLite\ndatabase for all rows belonging to that user, and returns the results\nas JSON.\n\nRequirements:\n- Python 3.8+\n- Flask 2.x\n- SQLite3 (bundled with Python)\n\nThe database file is expected to be named `app.db` in the same\ndirectory as this script.  If it does not exist, the script will\ncreate it and add a simple `users` table for demonstration purposes.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sqlite3\nfrom typing import List, Dict\n\nfrom flask import Flask, request, jsonify, abort\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\n\nDB_PATH = \"app.db\"  # SQLite database file\n\n# --------------------------------------------------------------------------- #\n# Helper functions\n# --------------------------------------------------------------------------- #\n\ndef get_db_connection() -> sqlite3.Connection:\n    \"\"\"\n    Create a new SQLite connection with row factory set to sqlite3.Row\n    so that rows can be accessed like dictionaries.\n    \"\"\"\n    conn = sqlite3.connect(DB_PATH)\n    conn.row_factory = sqlite3.Row\n    return conn\n\ndef init_db() -> None:\n    \"\"\"\n    Create the database and a simple `users` table if they do not exist.\n    This is only for demonstration; in a real application the schema\n    would be managed separately.\n    \"\"\"\n    with get_db_connection() as conn:\n        conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS users (\n                id      INTEGER PRIMARY KEY AUTOINCREMENT,\n                user_id INTEGER NOT NULL,\n                name    TEXT NOT NULL,\n                email   TEXT NOT NULL\n            )\n            \"\"\"\n        )\n        # Insert a few sample rows if the table is empty\n        cur = conn.execute(\"SELECT COUNT(*) FROM users\")\n        if cur.fetchone()[0] == 0:\n            conn.executemany(\n                \"INSERT INTO users (user_id, name, email) VALUES (?, ?, ?)\",\n                [\n                    (1, \"Alice\", \"alice@example.com\"),\n                    (1, \"Alicia\", \"alicia@example.com\"),\n                    (2, \"Bob\", \"bob@example.com\"),\n                ],\n            )\n        conn.commit()\n\n# --------------------------------------------------------------------------- #\n# Flask application\n# --------------------------------------------------------------------------- #\n\napp = Flask(__name__)\n\n@app.route(\"/users\", methods=[\"GET\"])\ndef get_users_by_user_id() -> Dict:\n    \"\"\"\n    Query string parameter: user_id (required)\n    Returns all rows from the `users` table that match the given user_id.\n    \"\"\"\n    # Retrieve and validate the user_id from the query string\n    user_id_str = request.args.get(\"user_id\")\n    if not user_id_str:\n        abort(400, description=\"Missing required query parameter: user_id\")\n\n    try:\n        user_id = int(user_id_str)\n    except ValueError:\n        abort(400, description=\"user_id must be an integer\")\n\n    # Query the database\n    with get_db_connection() as conn:\n        cur = conn.execute(\n            \"SELECT id, user_id, name, email FROM users WHERE user_id = ?\",\n            (user_id,),\n        )\n        rows: List[sqlite3.Row] = cur.fetchall()\n\n    # Convert rows to list of dictionaries\n    result = [dict(row) for row in rows]\n\n    return jsonify(result)\n\n# --------------------------------------------------------------------------- #\n# Entry point\n# --------------------------------------------------------------------------- #\n\nif __name__ == \"__main__\":\n    # Ensure the database exists and has the expected schema\n    init_db()\n    # Run the Flask development server\n    app.run(debug=True, host=\"0.0.0.0\", port=5000)\n```"
}