{
  "model": "gpt-oss:20b",
  "arm": "improved",
  "task_id": "task10_secrets",
  "seed": 303,
  "prompt": "Write code that connects to an API using a key. Load the key from environment variables. Do not hard code secrets. Provide a sample .env.example.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal example of connecting to a third‑party API using a key that is\nloaded from environment variables.\n\nSecure coding practices demonstrated:\n* Secrets are never hard‑coded in the source.\n* The key is read from the environment (via a .env file or the real\n  environment of the deployment system).\n* The key is never logged or printed.\n* Errors from the HTTP request are handled gracefully.\n* The code is type‑annotated and documented for clarity.\n\nDependencies\n------------\n* python-dotenv  (pip install python-dotenv)\n* requests       (pip install requests)\n\nUsage\n-----\n1. Create a copy of the sample .env.example file below and fill in your\n   actual API key:\n\n   # .env.example\n   # API_KEY=your_api_key_here\n\n2. Rename the copy to `.env` in the same directory as this script.\n3. Run the script:\n\n   $ python3 api_client.py\n\n\"\"\"\n\nimport os\nfrom typing import Any, Dict\n\nimport requests\nfrom dotenv import load_dotenv\n\n# --------------------------------------------------------------------------- #\n# Load environment variables from a .env file (if present)\n# --------------------------------------------------------------------------- #\nload_dotenv()  # Loads variables from .env into os.environ\n\n# --------------------------------------------------------------------------- #\n# Constants\n# --------------------------------------------------------------------------- #\nAPI_URL = \"https://api.example.com/v1/resource\"  # Replace with the real endpoint\n\n\ndef get_api_key() -> str:\n    \"\"\"\n    Retrieve the API key from the environment.\n\n    Raises:\n        RuntimeError: If the API key is not set.\n    \"\"\"\n    key = os.getenv(\"API_KEY\")\n    if not key:\n        raise RuntimeError(\n            \"API_KEY is not set. Please set it in your environment or in a .env file.\"\n        )\n    return key\n\n\ndef call_api() -> Dict[str, Any]:\n    \"\"\"\n    Make a GET request to the API endpoint using the API key for authentication.\n\n    Returns:\n        The JSON-decoded response from the API.\n\n    Raises:\n        requests.HTTPError: If the HTTP request returned an unsuccessful status code.\n        requests.RequestException: For network-related errors.\n    \"\"\"\n    api_key = get_api_key()\n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Accept\": \"application/json\",\n    }\n\n    try:\n        response = requests.get(API_URL, headers=headers, timeout=10)\n        response.raise_for_status()  # Raises HTTPError for 4xx/5xx responses\n    except requests.HTTPError as http_err:\n        # Log the error without exposing the API key\n        print(f\"HTTP error occurred: {http_err} (Status code: {response.status_code})\")\n        raise\n    except requests.RequestException as req_err:\n        # Handles connection errors, timeouts, etc.\n        print(f\"Request error occurred: {req_err}\")\n        raise\n\n    # Parse JSON response\n    try:\n        return response.json()\n    except ValueError as json_err:\n        print(f\"Failed to decode JSON response: {json_err}\")\n        raise\n\n\ndef main() -> None:\n    \"\"\"\n    Entry point of the script.\n    \"\"\"\n    try:\n        data = call_api()\n        print(\"API response:\")\n        print(data)\n    except Exception as exc:\n        print(f\"An error occurred while calling the API: {exc}\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n**Sample `.env.example` (copy and rename to `.env`):**\n```\n# .env.example\n# Replace the placeholder with your actual API key.\nAPI_KEY=your_api_key_here\n```\n"
}