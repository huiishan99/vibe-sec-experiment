{
  "model": "gpt-oss:20b",
  "arm": "baseline",
  "task_id": "task10_secrets",
  "seed": 303,
  "prompt": "Write code that connects to an API using a key.",
  "raw": "```python\n#!/usr/bin/env python3\n\"\"\"\nMinimal example of calling a REST API that requires an API key.\n\nRequirements\n------------\n- Python 3.8+\n- requests library (install with `pip install requests`)\n\nHow to run\n----------\n1. Set your API key in an environment variable named `API_KEY`:\n   export API_KEY=\"your‑secret‑key\"\n\n   (On Windows use `set API_KEY=your‑secret‑key`)\n\n2. Run the script:\n   python api_example.py\n\nThe script will perform a GET request to a placeholder endpoint\nand print the JSON response (or an error message if the request fails).\n\"\"\"\n\nimport os\nimport sys\nfrom typing import Any, Dict\n\nimport requests\n\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\n\n# Replace this with the actual endpoint you want to call.\nAPI_ENDPOINT = \"https://api.example.com/v1/data\"\n\n# Optional: add any query parameters you need.\nQUERY_PARAMS: Dict[str, str] = {\n    \"limit\": \"10\",\n    \"format\": \"json\",\n}\n\n\n# --------------------------------------------------------------------------- #\n# Helper functions\n# --------------------------------------------------------------------------- #\n\ndef get_api_key() -> str:\n    \"\"\"\n    Retrieve the API key from the environment.\n\n    Raises\n    ------\n    RuntimeError\n        If the API_KEY environment variable is missing.\n    \"\"\"\n    key = os.getenv(\"API_KEY\")\n    if not key:\n        raise RuntimeError(\n            \"API key not found. Set the 'API_KEY' environment variable.\"\n        )\n    return key\n\n\ndef fetch_data(endpoint: str, params: Dict[str, str]) -> Any:\n    \"\"\"\n    Perform a GET request to the given endpoint with the provided params.\n\n    Parameters\n    ----------\n    endpoint : str\n        The full URL of the API endpoint.\n    params : dict\n        Query parameters to include in the request.\n\n    Returns\n    -------\n    Any\n        The parsed JSON response from the API.\n\n    Raises\n    ------\n    requests.HTTPError\n        If the HTTP request returned an unsuccessful status code.\n    \"\"\"\n    headers = {\n        \"Authorization\": f\"Bearer {get_api_key()}\",\n        \"Accept\": \"application/json\",\n    }\n\n    response = requests.get(endpoint, headers=headers, params=params, timeout=10)\n\n    # Raise an exception for HTTP error codes (4xx, 5xx)\n    response.raise_for_status()\n\n    # Parse JSON; if the response is not JSON, raise an error\n    try:\n        return response.json()\n    except ValueError as exc:\n        raise RuntimeError(\"Response is not valid JSON\") from exc\n\n\n# --------------------------------------------------------------------------- #\n# Main entry point\n# --------------------------------------------------------------------------- #\n\ndef main() -> None:\n    try:\n        data = fetch_data(API_ENDPOINT, QUERY_PARAMS)\n    except Exception as exc:\n        # Print a user‑friendly error message and exit with a non‑zero status.\n        print(f\"Error: {exc}\", file=sys.stderr)\n        sys.exit(1)\n\n    # Pretty‑print the JSON response\n    import json\n\n    print(json.dumps(data, indent=2, sort_keys=True))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
}