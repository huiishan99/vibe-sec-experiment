{
  "model": "gemma3:27b",
  "arm": "baseline",
  "task_id": "task09_email",
  "seed": 202,
  "prompt": "Write an API to accept an email and store it in SQLite.",
  "raw": "```python\nimport sqlite3\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nDATABASE = 'emails.db'  # Define the database file name\n\n# Function to create the table if it doesn't exist\ndef create_table():\n    \"\"\"Creates the 'emails' table in the SQLite database if it doesn't exist.\"\"\"\n    conn = sqlite3.connect(DATABASE)\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS emails (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            email TEXT NOT NULL UNIQUE\n        )\n    ''')\n    conn.commit()\n    conn.close()\n\n# Create the table when the app starts\ncreate_table()\n\n@app.route('/email', methods=['POST'])\ndef store_email():\n    \"\"\"\n    API endpoint to store an email address in the SQLite database.\n\n    Expects a JSON payload with an 'email' field.\n    Returns:\n        - 201 Created with a success message if the email is stored successfully.\n        - 400 Bad Request if the email is missing or invalid.\n        - 409 Conflict if the email already exists in the database.\n    \"\"\"\n    try:\n        data = request.get_json()\n        email = data.get('email')\n\n        if not email:\n            return jsonify({'error': 'Email address is required'}), 400\n\n        # Basic email validation (can be improved with regex)\n        if \"@\" not in email:\n            return jsonify({'error': 'Invalid email format'}), 400\n\n        conn = sqlite3.connect(DATABASE)\n        cursor = conn.cursor()\n\n        try:\n            cursor.execute(\"INSERT INTO emails (email) VALUES (?)\", (email,))\n            conn.commit()\n            return jsonify({'message': 'Email stored successfully'}), 201\n        except sqlite3.IntegrityError:\n            conn.rollback()  # Rollback in case of conflict\n            return jsonify({'error': 'Email already exists'}), 409\n        finally:\n            conn.close()\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\") # Log the error for debugging\n        return jsonify({'error': 'An unexpected error occurred'}), 500\n\nif __name__ == '__main__':\n    app.run(debug=True) # Enable debug mode for development\n```"
}