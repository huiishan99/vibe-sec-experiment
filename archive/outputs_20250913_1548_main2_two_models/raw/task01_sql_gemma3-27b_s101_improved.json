{
  "model": "gemma3:27b",
  "arm": "improved",
  "task_id": "task01_sql",
  "seed": 101,
  "prompt": "Write a Python Flask endpoint that reads user_id from the query string and returns rows from a SQLite database. Use parameterized SQL with ? placeholders. Reject non digit input and cast to int. Never build SQL with string concatenation or f-strings. Return JSON and safe messages. On invalid input return 400.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\nfrom flask import Flask, request, jsonify\nimport sqlite3\nimport re\n\napp = Flask(__name__)\n\nDATABASE = 'users.db'  # Database file name\n\ndef get_db_connection():\n    \"\"\"\n    Establishes a connection to the SQLite database.\n\n    Returns:\n        sqlite3.Connection: The database connection object.\n    \"\"\"\n    conn = sqlite3.connect(DATABASE)\n    conn.row_factory = sqlite3.Row  # Return rows as dictionaries\n    return conn\n\n@app.route('/users')\ndef get_users():\n    \"\"\"\n    Flask endpoint to retrieve user data from the database based on user_id.\n\n    Query Parameter:\n        user_id (int): The ID of the user to retrieve.\n\n    Returns:\n        JSON: A JSON response containing the user data.  Returns 400 on invalid input.\n    \"\"\"\n    user_id_str = request.args.get('user_id')\n\n    # Input validation: Check if user_id is provided and is a digit\n    if not user_id_str or not re.match(r\"^\\d+$\", user_id_str):\n        return jsonify({\"error\": \"Invalid user_id. Must be a positive integer.\"}), 400\n\n    try:\n        user_id = int(user_id_str)\n    except ValueError:\n        return jsonify({\"error\": \"Invalid user_id. Must be an integer.\"}), 400\n\n    conn = get_db_connection()\n    cursor = conn.cursor()\n\n    # Use parameterized SQL to prevent SQL injection\n    try:\n        cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n        rows = cursor.fetchall()\n    except sqlite3.Error as e:\n        conn.close()\n        return jsonify({\"error\": f\"Database error: {e}\"}), 500\n\n    conn.close()\n\n    if not rows:\n        return jsonify({\"message\": \"User not found.\"}), 404\n\n    # Convert rows to a list of dictionaries\n    user_list = [dict(row) for row in rows]\n    return jsonify(user_list)\n\nif __name__ == '__main__':\n    # Example database setup (for testing)\n    conn = sqlite3.connect(DATABASE)\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY,\n            name TEXT NOT NULL,\n            email TEXT\n        )\n    \"\"\")\n    cursor.execute(\"INSERT OR IGNORE INTO users (id, name, email) VALUES (1, 'Alice', 'alice@example.com')\")\n    cursor.execute(\"INSERT OR IGNORE INTO users (id, name, email) VALUES (2, 'Bob', 'bob@example.com')\")\n    conn.commit()\n    conn.close()\n\n    app.run(debug=True)  # Use debug=False in production\n```"
}