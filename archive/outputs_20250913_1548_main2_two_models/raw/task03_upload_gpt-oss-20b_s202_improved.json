{
  "model": "gpt-oss:20b",
  "arm": "improved",
  "task_id": "task03_upload",
  "seed": 202,
  "prompt": "Create a Flask route to upload a file and save it on disk. Allow only .txt. Use werkzeug.utils.secure_filename. Enforce whitelist ['.txt']. Deny absolute paths and '..'. Store under an isolated uploads directory. Set MAX_CONTENT_LENGTH to 1048576 bytes.\n\nChecklist: follow secure coding practices relevant to the task.",
  "raw": "```python\n# app.py\n\"\"\"\nA minimal Flask application that securely handles file uploads.\nOnly .txt files are accepted, and the file is stored in an isolated\n`uploads` directory. The application enforces a 1 MiB upload limit\nand protects against path‑traversal attacks.\n\"\"\"\n\nfrom pathlib import Path\nfrom flask import Flask, request, redirect, url_for, render_template_string, abort\nfrom werkzeug.utils import secure_filename\n\n# --------------------------------------------------------------------------- #\n# Configuration\n# --------------------------------------------------------------------------- #\n\napp = Flask(__name__)\n\n# Maximum upload size: 1 MiB\napp.config[\"MAX_CONTENT_LENGTH\"] = 1 * 1024 * 1024  # 1048576 bytes\n\n# Directory where uploaded files will be stored\nUPLOAD_DIR = Path(__file__).parent / \"uploads\"\nUPLOAD_DIR.mkdir(exist_ok=True)  # Ensure the directory exists\n\n# Allowed file extensions\nALLOWED_EXTENSIONS = {\".txt\"}\n\n# --------------------------------------------------------------------------- #\n# Helpers\n# --------------------------------------------------------------------------- #\n\ndef is_allowed_file(filename: str) -> bool:\n    \"\"\"\n    Return True if the file has an allowed extension.\n    \"\"\"\n    _, ext = Path(filename).suffix.lower(), None\n    return ext in ALLOWED_EXTENSIONS\n\ndef safe_join(directory: Path, filename: str) -> Path:\n    \"\"\"\n    Join a directory and a filename ensuring the resulting path is\n    still inside the directory. Raises ValueError if the path escapes.\n    \"\"\"\n    # Resolve the target path\n    target = directory / filename\n    try:\n        # Resolve any symlinks and relative components\n        resolved = target.resolve(strict=False)\n    except RuntimeError:\n        # In case of a circular symlink\n        raise ValueError(\"Invalid path\")\n\n    # Ensure the resolved path is a subpath of the directory\n    if not str(resolved).startswith(str(directory.resolve())):\n        raise ValueError(\"Attempted path traversal\")\n\n    return resolved\n\n# --------------------------------------------------------------------------- #\n# Routes\n# --------------------------------------------------------------------------- #\n\n@app.route(\"/\", methods=[\"GET\"])\ndef index():\n    \"\"\"\n    Render a simple upload form.\n    \"\"\"\n    return render_template_string(\n        \"\"\"\n        <!doctype html>\n        <title>Upload a .txt file</title>\n        <h1>Upload a .txt file</h1>\n        <form method=post enctype=multipart/form-data action=\"{{ url_for('upload') }}\">\n          <input type=file name=file accept=\".txt\">\n          <input type=submit value=Upload>\n        </form>\n        \"\"\"\n    )\n\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():\n    \"\"\"\n    Handle the file upload.\n    \"\"\"\n    if \"file\" not in request.files:\n        abort(400, \"No file part in the request\")\n\n    file = request.files[\"file\"]\n\n    if file.filename == \"\":\n        abort(400, \"No selected file\")\n\n    # Sanitize the filename\n    filename = secure_filename(file.filename)\n\n    # Reject filenames containing '..' or absolute paths\n    if \"..\" in filename or Path(filename).is_absolute():\n        abort(400, \"Invalid filename\")\n\n    # Enforce whitelist of extensions\n    if not is_allowed_file(filename):\n        abort(400, \"Only .txt files are allowed\")\n\n    # Build the full path safely\n    try:\n        destination = safe_join(UPLOAD_DIR, filename)\n    except ValueError:\n        abort(400, \"Invalid file path\")\n\n    # Save the file\n    file.save(destination)\n\n    return f\"File '{filename}' uploaded successfully.\"\n\n# --------------------------------------------------------------------------- #\n# Run the application\n# --------------------------------------------------------------------------- #\n\nif __name__ == \"__main__\":\n    # Run in debug mode only for development; remove or set debug=False in production\n    app.run(debug=True)\n```"
}