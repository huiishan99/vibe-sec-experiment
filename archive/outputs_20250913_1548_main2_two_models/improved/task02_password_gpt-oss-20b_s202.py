#!/usr/bin/env python3
"""
Secure user registration module.

Features
--------
* Stores usernames and bcrypt‑hashed passwords in a file.
* Uses a per‑user salt (generated by bcrypt.gensalt()).
* Enforces a minimum password length of 12 characters.
* Never stores plaintext passwords.
* Simple line‑based storage: each line is "username:hash".
* Includes basic checks for duplicate usernames.

Security notes
--------------
* bcrypt automatically handles salt generation and key stretching.
* The file is opened in append mode and flushed immediately to reduce
  the risk of data loss.
* For production use, consider encrypting the file at rest and
  using a proper database with ACID guarantees.
"""

from __future__ import annotations

import os
import pathlib
import sys
from typing import Optional

import bcrypt

# --------------------------------------------------------------------------- #
# Configuration
# --------------------------------------------------------------------------- #

# Default path for the user database file.
DEFAULT_DB_PATH = pathlib.Path.home() / ".user_db.txt"

# --------------------------------------------------------------------------- #
# Helper functions
# --------------------------------------------------------------------------- #

def _load_users(db_path: pathlib.Path) -> dict[str, bytes]:
    """
    Load existing users from the database file.

    Returns a dictionary mapping usernames to their bcrypt hash bytes.
    """
    users: dict[str, bytes] = {}
    if not db_path.exists():
        return users

    with db_path.open("r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line or ":" not in line:
                continue
            username, hash_b64 = line.split(":", 1)
            users[username] = hash_b64.encode("utf-8")
    return users


def _write_user(db_path: pathlib.Path, username: str, hashed: bytes) -> None:
    """
    Append a new user record to the database file.
    """
    # Ensure the parent directory exists.
    db_path.parent.mkdir(parents=True, exist_ok=True)

    with db_path.open("a", encoding="utf-8") as f:
        # Store the hash as a UTF‑8 string.
        f.write(f"{username}:{hashed.decode('utf-8')}\n")
        f.flush()
        os.fsync(f.fileno())


# --------------------------------------------------------------------------- #
# Public API
# --------------------------------------------------------------------------- #

def register_user(
    username: str,
    password: str,
    db_path: Optional[pathlib.Path] = None,
) -> None:
    """
    Register a new user.

    Parameters
    ----------
    username : str
        Desired username. Must be unique.
    password : str
        Plaintext password. Must be at least 12 characters long.
    db_path : pathlib.Path, optional
        Path to the user database file. Defaults to ~/.user_db.txt.

    Raises
    ------
    ValueError
        If the password is too short, the username already exists,
        or the username is empty.
    """
    if db_path is None:
        db_path = DEFAULT_DB_PATH

    # Basic validation
    if not username:
        raise ValueError("Username cannot be empty.")
    if len(password) < 12:
        raise ValueError("Password must be at least 12 characters long.")

    # Load existing users to check for duplicates
    users = _load_users(db_path)
    if username in users:
        raise ValueError(f"Username '{username}' is already taken.")

    # Generate a per‑user salt and hash the password
    salt = bcrypt.gensalt()  # bcrypt automatically generates a 16‑byte salt
    hashed = bcrypt.hashpw(password.encode("utf-8"), salt)

    # Persist the new user
    _write_user(db_path, username, hashed)


# --------------------------------------------------------------------------- #
# Example usage
# --------------------------------------------------------------------------- #

if __name__ == "__main__":
    # Simple command‑line interface for demonstration purposes.
    if len(sys.argv) != 3:
        print("Usage: python register.py <username> <password>", file=sys.stderr)
        sys.exit(1)

    user, pwd = sys.argv[1], sys.argv[2]
    try:
        register_user(user, pwd)
        print(f"User '{user}' registered successfully.")
    except ValueError as exc:
        print(f"Error: {exc}", file=sys.stderr)
        sys.exit(1)